[
    {
        "id": "module-1",
        "name": "Modul 1: Úvod do ROSMASTER R2",
        "lectures": [
            {
                "id": "lecture-1-1",
                "name": "Prednáška 1 - Úvod do robota ROSMASTER R2 a jeho komponentov",
                "description": [
                    { "type": "title", "content": "Úvod" },
                    { "type": "text", "content": "Vitajte na vzdialenom kurze robotiky s platformou Rosmaster R2. Tento kurz vám poskytne základné znalosti v oblasti robotiky kombináciou zaujímavých praktických skúseností so silnými teoretickými vedomosťami. Po úspešnom absolvovaní bude mať študent pevné základné znalosti v oblasti autonómnej mobility a bude schopný implementovať od najzákladnejších až po pokročilé funkcie na robotovi Rosmaster R2."},
                    { "type": "text", "content": "Čo je Rosmaster R2? Je to v podstate diaľkovo ovládané vozidlo doplnené o ďalšie hardvérové a softvérové komponenty, ktoré ho menia na univerzálnou platformu pre robotiku. Predstavuje ideálny vzdelávací nástroj na učenie základov robotiky a ovládanie Robotického operačného systému (ROS) z toho dôvodu, že je navrhnutý tak, aby napodobňoval funkčnosť autonómnych vozidiel."},
                    { "type": "text", "content": "Tento kurz je štruktúrovaný tak, aby vás postupne previedol od základných konceptov k pokročilým aplikáciám v robotike. Témy zahŕňajú: základné zapojenie a konfiguráciu Rosmaster R2, prácu so senzormi, implementáciu základných algoritmov pre navigáciu, využitie AI pre autonómne funkcie, počítačové videnie, hlboké učenie, autopilota a prípadne rozšírenia ako hlasové ovládanie."},
                    { "type": "text", "content": "Tieto vlastnosti robota Rosmaster R2 sú výsledkom kombinácie výkonného hardvéru a inteligentných softvérových komponentov. Na úplné pochopenie fungovania tohto systému a naučenie sa jeho ovládania je nevyhnutné preskúmať dve základné oblasti: Hardvér (všetky fyzické komponenty, ako sú motory, senzory a procesory) a Softvér (inteligencia za hardvérom, ROS, spracovanie úloh, ako je navigácia, spracovanie senzorov, rozhodovanie a funkcie podporované umelou inteligenciou)."},
                    { "type": "title", "content": "Hardvérové komponenty robota" },
                    { "type": "subtitle", "content": "Jetson Orin NX 8GB" },
                    { "type": "text", "content": "<a href='https://www.techpowerup.com/gpu-specs/jetson-orin-nx-8-gb.c4081' target='_blank'>NVIDIA Jetson Orin NX 8GB</a> je centrálny procesorový modul v Rosmaster R2, navrhnutý na zvládanie pokročilých úloh v oblasti AI a robotiky. Je to komponent, na ktorom je nainštalovaný systém ROS a kde prebieha všetko spracovanie."},
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/t_Jetson Orin NX 8GB /v1735049178/jetson_orin_nx_m3rwu2.jpg", "alt": "An image showcasing a Jetson Orin NX 8GB." },
                    { "type": "text", "content": "Obsahuje 8GB LPDDR5 pamäte, ktorá umožňuje rýchly prístup k údajom a plynulý chod systému, potrebný na spracovanie senzorových dát, spúšťanie AI modelov a riadenie robota." },
                    { "type": "text", "content": "Vďaka NVIDIA Ampere GPU a Arm Cortex-A78AE CPU zvláda Jetson Orin NX úlohy ako detekcia objektov, navigácia a rozhodovanie v reálnom čase." },
                    { "type": "text", "content": "Jetson Orin NX 8GB funguje ako mozog Rosmastera R2 a poskytuje mu výpočtový výkon, ktorý mu umožňuje spúšťať zložité modely AI, spracovávať dáta zo senzorov v reálnom čase a spravovať navigačné a rozhodovacie úlohy." },
                    { "type": "subtitle", "content": "ROS robot expansion board" },
                    { "type": "text", "content": "Táto <a href='https://category.yahboom.net/products/ros-driver-board' target='_blank'>multifunkčná programovacia vývojová doska od Yahboom</a> je zároveň všestrannou riadiacou doskou pre roboty. Slúži ako ovládač ROS auta a zároveň ako vývojová doska s jadrom STM32. Táto doska je navrhnutá pre robotické systémy založené na systéme ROS a funguje ako rozhranie medzi robotickým hardvérom a operačným systémom ROS. Je postavená na mikroprocesore STM32, čo umožňuje pokročilé programovanie a riadenie hardvéru." },
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735138079/61KN8cFPEXL._SL1500__jlleby.jpg", "alt": "An image showcasing a ROS robot expansion board." },
                    { "type": "text", "content": "Účelom tejto dosky je integrovať riadenie, komunikáciu a správu napájania do jedného celku, čím sa zjednodušuje tvorba pokročilých robotických systémov" },
                    { "type": "subtitle", "content": "USB HUB expansion board" },
                    { "type": "text", "content": "Táto rozširujúca doska je <a href='https://category.yahboom.net/products/usb-hub' target='_blank'>vysokovýkonný USB 3.0 hub od spoločnosti Yahboom</a>, kompatibilný so širokou škálou zariadení vrátane Jetson Orin NX." },
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735144186/Sdfb8c362c36d40aba3ccd3fdbeeca0d7H.jpg_640x640q90_nycq0u.webp", "alt": "An image showcasing a ROS robot expansion board." },
                    { "type": "text", "content": "Má jeden vstupný USB port na pripojenie k hlavnej doske (v tomto prípade Jetson Orin NX) a štyri USB 3.0 výstupy, ktoré podporujú prenos dát až 500 MB/s. Táto doska podporuje tri režimy napájania – micro USB, DC5.5*2.5 a XH2.54 – s možnosťou vstupného napätia 9-24 V. Čip VL817 HUB zabezpečuje spoľahlivý prenos dát bez výpadkov spôsobených nedostatkom napájania. Táto univerzálna doska je široko použiteľná pre roboty, inteligentné autá a vývojové platformy a poskytuje robustný výkon pre náročné aplikácie." },
                    { "type": "text", "content": "Hlavným účelom tejto dosky je rozšírenie konektivity. V systéme Rosmaster R2 umožňuje súčasné pripojenie viacerých periférií, ako sú kamery, LIDAR a externé úložiská." },
                    { "type": "subtitle", "content": "Hĺbková kamera" },
                    { "type": "text", "content": "Na Rosmaster R2 je nainštalovaná kamera Astra Pro Plus, pokročilé zariadenie na snímanie 3D obrazu zo <a href='https://category.yahboom.net/products/usb-hub' target='_blank'> série Astra od Orbbecu</a>. Táto kamera je súčasťou prvej rodiny 3D kamier využívajúcich technológiu štruktúrovaného svetla – metódu, ktorá meria hĺbku a vytvára 3D modely prostredia projekciou svetelného vzoru (ako sú mriežky alebo body) na povrch a analýzou jeho deformácií." },
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735144408/O1CN01nGcRg523QYJ0BxkIF__375997250_hwhnhv.webp", "alt": "An image showcasing a Hĺbková kamera." },
                    { "type": "text", "content": "Astra Pro Plus sa používa najmä na:" },
                    { "type": "bullet", "item": "Depth sensing ", "description": "(meranie hĺbky) – umožňuje robotovi vnímať okolie v 3D." },
                    { "type": "bullet", "item": "Obstacle Detection ", "description": "(detekciu prekážok) – identifikáciu a vyhýbanie sa prekážkam počas navigácie." },
                    { "type": "bullet", "item": "3D Mapping and Reconstruction ", "description": "(3D mapovanie a rekonštrukciu) – tvorbu podrobných modelov prostredia pre autonómnu prevádzku." },
                    { "type": "bullet", "item": "Human-Interaction Tasks ", "description": " (úlohy interakcie s ľuďmi) – podporuje rozpoznávanie gest a sledovanie tváre v interaktívnych situáciách." },
                    { "type": "text", "content": "Podrobné vlastnosti a funkcie kamery budú podrobnejšie rozobraté v ďalšej časti kurzu." },
                    { "type": "subtitle", "content": "A1 Lidar" },
                    { "type": "text", "content": "<a href='https://www.ibm.com/topics/lidar' target='_blank'> LIDAR</a>, alebo Light Detection and Ranging, je technológia, ktorá využíva laserové lúče na meranie vzdialeností k objektom. Funguje na princípe vysielania laserových impulzov, ktoré sa odrazia od okolitých objektov a vrátia sa späť k senzoru." },
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735145387/rplidar-a1-1_opfjug.jpg", "alt": "An image showcasing a A1 Lidar." },
                    { "type": "text", "content": "<a href='https://www.slamtec.com/en/Lidar/A1/' target='_blank'> RPLIDAR A1</a>, ktorý sa nachádza v Rosmaster R2, je 360° senzor schopný skenovať okolie rotáciou v smere hodinových ručičiek. Tento senzor používa Slamtec OPTMAG technológiu, ktorá nahrádza bežné klzné krúžky bezdrôtovou energiou a optickou komunikáciou. Táto technológia eliminuje mechanické opotrebenie, čím výrazne predlžuje životnosť a zlepšuje spoľahlivosť v porovnaní s tradičnými LIDAR senzormi." },
                    { "type": "text", "content": "Špecializuje sa na presné 2D mapovanie a detekciu prekážok na veľké vzdialenosti. Poskytuje presné merania vzdialeností vo všetkých smeroch, čo ho robí ideálnym na úlohy, ako je mapovanie veľkých oblastí, identifikácia vzdialených prekážok a efektívne plánovanie trás v otvorených prostrediach." },
                    { "type": "text", "content": "Podrobné vlastnosti a funkcie LiDARa budú podrobnejšie rozobraté v ďalšej časti kurzu." },
                    { "type": "subtitle", "content": "OLED displej" },
                    { "type": "text", "content": "Zobrazuje základné systémové informácie, ako sú stav batérie alebo IP adresa siete." },
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/t_bebra/v1735145683/5_fa4af9ae-66e6-4358-9e9e-d375843fb33f_1024x_t8gs6k.jpg", "alt": "An image showcasing a OLED displej." },
                    { "type": "subtitle", "content": "7-inch LCD displej" },
                    { "type": "text", "content": "Zobrazuje používateľské rozhranie systému Ubuntu bežiaceho na ROSMASTER R2, čo umožňuje priamu interakciu so systémom pri programovaní a ladení." },
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735145840/LB-00015_7_inch_LCD_HDMI_Touch_Screen_Display_TFT_for_Raspberry_Pi_3_1_tansan.jpg", "alt": "An image showcasing a 7-inch LCD displej." },
                    { "type": "subtitle", "content": "Wi-Fi Antény" },
                    { "type": "text", "content": "Umožňujú diaľkové ovládanie robota prostredníctvom mobilnej aplikácie alebo počítača, pričom zaisťujú stabilnú komunikáciu a konektivitu." },
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735146143/8986a0b81cab69081d2afdbf0f9d7e92_jbzlgi.jpg", "alt": "An image showcasing a Wi-Fi Antény." },
                    { "type": "subtitle", "content": "9-osový senzor orientácie" },
                    { "type": "text", "content": "9-osový senzor v ROSMASTER R2 zahŕňa 3-osový gyroskop na meranie uhlovej rýchlosti, 3-osový akcelerometer na detekciu lineárneho pohybu a náklonu, ako aj 3-osový magnetometer na určenie smeru podľa magnetického poľa Zeme. Tieto komponenty spoluponúkajú presné údaje na sledovanie orientácie a pohybu." },
                    { "type": "text", "content": "Podrobné vlastnosti a funkcie budú podrobnejšie rozobraté v ďalšej časti kurzu." },
                    { "type": "subtitle", "content": "Reproduktor" },
                    { "type": "text", "content": "Zabezpečuje zvukový výstup pre systémové upozornenia, notifikácie alebo vlastné zvukové prehrávanie." },
                    { "type": "subtitle", "content": "Led Pásik" },
                    { "type": "text", "content": "Programovateľný LED pásik s možnosťou prispôsobiteľného osvetlenia, ktoré môže indikovať stav systému alebo aktivitu." },
                    { "type": "subtitle", "content": "Motor M2 a Motor M4" },
                    { "type": "text", "content": "Na Rosmaster R2 sú nainštalované dva motory M2 a M4 na ovládanie zadných kolies." },
                    { "type": "subtitle", "content": "Batéria" },
                    { "type": "text", "content": "Zabezpečuje napájanie Rosmaster R2 a podporuje ovládač Jetson Orin NX. Umožňuje spoľahlivú prevádzku a zahŕňa funkcie ako výstrahy pri nízkom napätí a efektívne riadenie energie." },
                    { "type": "subtitle", "content": "Modul na Hlasovú Interakciu" },
                    { "type": "text", "content": "Slúži ako zvukový vstup robota, ktorý umožňuje hlasové ovládanie." },
                    { "type": "title", "content": "Softvérové komponenty" },
                    { "type": "text", "content": "ROSMASTER R2 používa operačný systém <a href='https://ubuntu.com/robotics' target='_blank'> Ubuntu</a>, ktorý je založený na Linuxe, a má predinštalovaný <a href='https://www.ros.org/' target='_blank'> ROS</a> (Robot Operating System)." },
                    { "type": "text", "content": "Prečo Ubuntu? Lebo je to široko používaný operačný systém v robotike vďaka svojej stabilite, otvorenému kódu a podpore pre ROS, čo ho robí ideálnym na vývoj a prevádzku robotických aplikácií." },
                    { "type": "text", "content": "Prečo ROS? Lebo je to open-source framework na programovanie a vývoj robotov. Poskytuje knižnice a nástroje na implementáciu navigácie, integrácie senzorov a riadenia pohybu." },
                    { "type": "text", "content": "ROS slúži primárne na riadenie komunikácie medzi hardvérom a softvérom robota, čo umožňuje funkcie ako vnímanie, rozhodovanie a vykonávanie pohybu." },
                    { "type": "text", "content": "Podrobnosti o Ubuntu a ROS, vrátane ich úloh a výhod, budú podrobnejšie preberané neskôr v kurze. Rovnako sa neskôr budeme venovať aj ďalšiemu softvéru, ktorý je súčasťou Rosmaster R2."},
                    { "type": "title", "content": "Príprava na cvičenie" },
                    { "type": "text", "content": "Na cvičenie si budete musieť stiahnuť túto aplikáciu a počas cvičenia budeme pracovať s diaľkovým ovládaním robota."},
                    { "type": "image", "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735146911/16250477241055-min_uudl5e.png", "alt": "An image showcasing a QR code." }
                ]
            } 
        ],
        "exercises": [
            { 
                "id": "exercise-1-1",
                "name": "Cvičenie 1 - Návod na diaľkové ovládanie mobilnou aplikáciou pre Rosmaster R2",
                "description": [
                    {
                        "type": "title",
                        "content": "1. Inštalácia mobilnej aplikácie"
                    },
                    {
                        "type": "subtitle",
                        "content": "1.1 Naskenovanie kódu na inštaláciu aplikácie"
                    },
                    {
                        "type": "text",
                        "content": "Pre používateľov <strong>Androidu</strong>:<br>1. Otvorte prehliadač vo svojom mobilnom zariadení.<br>2. Naskenujte nižšie uvedený QR kód na stiahnutie a inštaláciu aplikácie MakerControl."
                    },
                    {
                        "type": "text",
                        "content": "Pre používateľov <strong>iOS</strong>:<br>1. Otvorte App Store a vyhľadajte aplikáciu MakerControl.<br>2. Alebo použite skener kódov na naskenovanie nižšie uvedeného QR kódu na stiahnutie a inštaláciu aplikácie."
                    },
                    {
                        "type": "text",
                        "content": "Ak už máte na telefóne nainštalovanú aplikáciu MakerControl, nie je potrebné ju opätovne inštalovať."
                    },
                    {
                        "type": "image",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735146911/16250477241055-min_uudl5e.png",
                        "alt": "QR code"
                    },
                
                    {
                        "type": "title",
                        "content": "2. Pripojenie aplikácie k Rosmaster R2 Robotovi"
                    },
                    {
                        "type": "subtitle",
                        "content": "2.1 Nastavenie siete"
                    },
                    {
                        "type": "text",
                        "content": "Systém Rosmaster obsahuje vstavaný hotspot s názvom ROSMASTER a predvoleným heslom 12345678. Pred použitím hotspotu sa uistite, že je zapnutý vypínač napájania na zariadení Rosmaster."
                    },
                    {
                        "type": "bullet",
                        "item": "Možnosť 1:",
                        "description": "Pripojte svoj telefón priamo k hotspotu ROSMASTER."
                    },
                    {
                        "type": "bullet",
                        "item": "Možnosť 2:",
                        "description": "Pripojte zariadenia Rosmaster a telefón k tej istej sieti routera."
                    },
                
                    {
                        "type": "subtitle",
                        "content": "2.2 Výber zariadenia"
                    },
                    {
                        "type": "text",
                        "content": "1. Otvorte aplikáciu MakerControl.<br>2. Zo zoznamu zariadení vyberte Rosmaster R2 v kategórii ROS Robot."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735149088/image-20220325121723408_zg0ad2.png",
                        "alt": "Zoznam zariadení"
                    },
                
                    {
                        "type": "subtitle",
                        "content": "2.3 Vytvorenie sieťového pripojenia"
                    },
                    {
                        "type": "text",
                        "content": "1. Stlačte na ikonu Wi-Fi v pravom hornom rohu aplikácie na pripojenie k robotovi Rosmaster.<br>2. Do poľa IP zadajte IP adresu zobrazenú na OLED displeji Rosmastera. Použite predvolené hodnoty pre polia Port a Video.<br>3. Kliknite na Connect."
                    },
                    {
                        "type": "text",
                        "content": "Po pripojení:<br>- Aplikácia sa automaticky presunie na hlavné ovládacie rozhranie.<br>- Ikona Wi-Fi už nebude zobrazovať zakázaný znak."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735149046/photo_2024-12-25_18-50-35_s4ovp9.jpg",
                        "alt": "Pripojenie k robotovi Rosmaster"
                    },
                
                    {
                        "type": "title",
                        "content": "3. Preskúmanie funkcií aplikácie"
                    },
                    {
                        "type": "subtitle",
                        "content": "3.1 Diaľkové ovládanie"
                    },
                    {
                        "type": "bullet",
                        "item": "Nastavenie rýchlosti:",
                        "description": "Ovládanie bežiacej rýchlosti robota."
                    },
                    {
                        "type": "bullet",
                        "item": "Nastavenie uhla serva predných kolies:",
                        "description": "Nastavenie uhla natočenia predných kolies."
                    },
                    {
                        "type": "bullet",
                        "item": "Ovládanie pohybu:",
                        "description": "Pohyb robota dopredu, dozadu, doľava, doprava alebo zastavenie."
                    },
                    {
                        "type": "bullet",
                        "item": "Režim celej obrazovky:",
                        "description": "Zobrazenie kamerového záznamu na celú obrazovku (kompatibilný s bezdrôtovými USB ovládačmi a stojanmi)."
                    },
                    {
                        "type": "bullet",
                        "item": "Displej kamery:",
                        "description": "Zobrazenie záznamu kamery v reálnom čase."
                    },
                    {
                        "type": "bullet",
                        "item": "Prepínanie režimov ovládania:",
                        "description": "Vyberte medzi gravitáciou, tlačidlovým ovládaním alebo ovládaním pomocou joysticku."
                    },
                    {
                        "type": "bullet",
                        "item": "Ovládanie bzučiaka:",
                        "description": "Aktivujte alebo deaktivujte bzučiak stlačením alebo uvoľnením tlačidla."
                    },
                    {
                        "type": "bullet",
                        "item": "Režim automatického stabilizovania:",
                        "description": "Aktivujte tento režim na plynulé zastavenie robota po prijatí príkazu na zastavenie."
                    },
                    {
                        "type": "bullet",
                        "item": "Ovládanie otáčania:",
                        "description": "Nastavte maximálny uhol otáčania serva predných kolies doľava a doprava."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735149648/image-20220325141443189_qzwbry.jpg",
                        "alt": "Rozhranie diaľkového ovládania"
                    },
                
                    {
                        "type": "subtitle",
                        "content": "3.2 Farebné svetlá"
                    },
                    {
                        "type": "text",
                        "content": "Stlačte na ikonu Dazzling Lights na hlavnom rozhraní. Ovládanie svetiel je rozdelené do troch sekcií:"
                    },
                    {
                        "type": "bullet",
                        "item": "Prepnúť farby:",
                        "description": "Nastavenie RGB farieb svetelného panela v reálnom čase pomocou posúvnikov R, G a B."
                    },
                    {
                        "type": "bullet",
                        "item": "Pevné farby:",
                        "description": "Vyberte prednastavené farby (červená, zelená, modrá, žltá, fialová, tyrkysová, biela alebo vypnuté). Možné je aj monochromatické dýchanie."
                    },
                    {
                        "type": "bullet",
                        "item": "Špeciálne efekty:",
                        "description": "Tečúce svetlá, svetelná reťaz, hviezdy, monochromatické dýchacie svetlá a prechodové svetlá. Rýchlosť efektov sa dá meniť posúvačom."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735149728/image-20220325143915694_c5tsid.png",
                        "alt": "Ovládanie farebných svetiel"
                    },
                
                    {
                        "type": "subtitle",
                        "content": "3.3 Pokyny na konfiguráciu"
                    },
                    {
                        "type": "text",
                        "content": "Úloha konfigurácie: Konfigurácia serva predných kolies zabezpečuje zarovnanie kolies pre rovnomerný a presný pohyb. Pravidelné resetovanie môže byť potrebné na odstránenie nesúladu zarovnania spôsobeného prepravou alebo častým používaním."
                    },
                    {
                        "type": "text",
                        "content": "Postup:<br>1. Stlačte na ikonu Configuration na hlavnom rozhraní.<br>2. Zdvihnite predné kolesá robota nad zem.<br>3. Pomocou posúvnika zarovnajte predné kolesá paralelne s telom robota.<br>4. Kliknite na Confirm na uloženie nastavení."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735149736/image-20220325144624337_ttpz4d.png",
                        "alt": "Konfigurácia serva predných kolies"
                    }
                ]
            }
    ]
    },    
    {
        "id": "module-2",
        "name": "Modul 2: Ovládanie hardvéru cez STM32CubeIDE",
        "lectures": [
            { 
                "id": "lecture-2-1", 
                "name": "Prednáška 2 - Komponenty a IDE",
                "description": [
                    { 
                        "type": "title", 
                        "content": "ROS robot expansion board: komponenty" 
                    },
                    { 
                        "type": "text", 
                        "content": "Ako som už spomenul v úvodnej prednáške, ROS robot expansion board je zodpovedná za riadenie robotického hardvéru a integráciu s operačným systémom ROS. Funguje na mikroprocesore STM32, čo jej umožňuje pokročilé programovanie a ovládanie rôznych komponentov robota."
                    },
                    { 
                        "type": "text", 
                        "content": "Teraz sa bližšie pozrieme na to, aké komponenty táto doska obsahuje a aké sú ich funkcie."
                    },
                    {
                        "type": "subtitle",
                        "content": "Horná časť rozširujúcej dosky"
                    },
                    {
                        "type": "image",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/t_ecr/v1735159474/image_2024-12-25_21-44-20_x1mo3q.png",
                        "alt": "ROS robot expansion board: komponenty"
                    },
                    {
                        "type": "text",
                        "content": "1. <strong>T DC 12V vstupný port:</strong> Hlavný vstup napájania pre rozširujúci modul, ktorý sa pripája k DC 12V napájaniu alebo 12V batérii. Poskytuje základné napájanie celej doske."
                    },
                    {
                        "type": "text",
                        "content": "2. <strong>DC 12V výstup:</strong> Poskytuje 12V jednosmerné napájanie na pripojenie ďalších zariadení."
                    },
                    {
                        "type": "text",
                        "content": "3. <strong>Indikátor napájania:</strong> Signalizuje, či je napájanie v normálnom stave. Umožňuje rýchlu kontrolu napájania."
                    },
                    {
                        "type": "text",
                        "content": "4. <strong>Micro USB dátové rozhranie:</strong> Slúži na pripojenie komunikácie s hostiteľom alebo na nahrávanie programu do dosky."
                    },
                    {
                        "type": "text",
                        "content": "5. <strong>Type-C rozhranie:</strong> Poskytuje 5V napájanie, no neslúži na komunikáciu. Ideálne na napájanie zariadení."
                    },
                    {
                        "type": "text",
                        "content": "6. <strong>DC 5V výstupný port:</strong> Napája Jetson Nano alebo iné zariadenia vyžadujúce 5V."
                    },
                    {
                        "type": "text",
                        "content": "7. <strong>I2C rozhranie:</strong> Umožňuje pripojenie externých I2C zariadení, ako sú OLED displeje alebo senzory."
                    },
                    {
                        "type": "text",
                        "content": "8. <strong>Indikátory:</strong> Zahŕňajú indikátor dátovej aktivity a indikátor napätia 6,8V, ktoré zobrazujú stav napájania a komunikácie."
                    },
                    {
                        "type": "text",
                        "content": "9. <strong>DC 12V výstup:</strong> Poskytuje 12V jednosmerné napájanie na pripojenie ďalších zariadení."
                    },
                    {
                        "type": "text",
                        "content": "10. <strong>DC 12V hlavný vypínač:</strong> Slúži na zapnutie alebo vypnutie hlavného napájania dosky."
                    },
                    {
                        "type": "text",
                        "content": "11. <strong>Tlačidlá:</strong><br>"
                    },
                    {
                        "type": "bullet", 
                        "item": "KEY1:",
                        "description": "Programovateľné tlačidlo pre vlastné funkcie." 
                    },
                    {
                        "type": "bullet", 
                        "item": "RESET:",
                        "description": "Resetuje mikrokontrolér na doske." 
                    },
                    {
                        "type": "bullet", 
                        "item": "BOOT0:",
                        "description": "Slúži na prepnutie mikrokontroléra do režimu nahrávania firmvéru." 
                    },
                    {
                        "type": "text",
                        "content": "12. <strong>9-osový senzor orientácie:</strong> Poskytuje informácie o aktuálnej polohe dosky, vhodné pre navigáciu."
                    },
                    {
                        "type": "text",
                        "content": "13. <strong>CAN rozhranie:</strong> Umožňuje pripojenie zariadení kompatibilných s CAN protokolom, napríklad priemyselných senzorov."
                    },
                    {
                        "type": "text",
                        "content": "14. <strong>RGB rozhranie na svetelný pás:</strong> Slúži na pripojenie RGB LED pásov pre vizuálne efekty."
                    },
                    {
                        "type": "text",
                        "content": "15. <strong>SBUS rozhranie:</strong> Používa sa na pripojenie prijímača diaľkového ovládania modelov lietadiel."
                    },
                    {
                        "type": "text",
                        "content": "16. <strong>Prepínač napätia PWM:</strong> Umožňuje zvoliť napätie 6,8V alebo 5V pre napájanie PWM servomotorov."
                    },
                    {
                        "type": "text",
                        "content": "17. <strong>PWM servomotor rozhranie:</strong> Pripojenie servomotorov s napätím 6,8V alebo 5V, podľa zvoleného napätia."
                    },
                    {
                        "type": "text",
                        "content": "18. <strong>Sériové rozhranie pre aktuátory:</strong> Slúži na pripojenie sériovo ovládaných mechanických ramien alebo aktuátorov."
                    },
                    {
                        "type": "text",
                        "content": "19. <strong>Bzučiak:</strong> Používa sa na zvukové výstrahy alebo upozornenia."
                    },
                    {
                        "type": "text",
                        "content": "20. <strong>Štvorcestný motorový port:</strong> Umožňuje pripojenie štyroch motorov. Spôsob pripojenia závisí od konkrétneho modelu."
                    },
                    {
                        "type": "subtitle",
                        "content": "Spodná časť rozširujúcej dosky"
                    },
                    {
                        "type": "image",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/t_ecr/v1735160629/Screenshot_2024-12-25_220316_dqjhdy.png",
                        "alt": "An image showcasing a bottom of expasion board."
                    },
                    {
                        "type": "text",
                        "content": "1. <strong>Mikrokontrolér (STM32):</strong> Hlavný riadiaci čip na doske, ktorý ovláda periférie, ako sú motory, senzory a LED diódy. Zodpovedá za spracovanie príkazov a riadenie všetkých funkcií dosky."
                    },
                    {
                        "type": "text",
                        "content": "2. <strong>SWD rozhranie (debugovacie rozhranie):</strong> Slúži na pripojenie debugovacieho nástroja, ako je ST-Link alebo J-Link, pre ladenie mikrokontroléra alebo nahrávanie firmvéru. Umožňuje aktualizáciu firmvéru a diagnostiku chýb."
                    },
                    {
                        "type": "title",
                        "content": "STM32CubeIDE"
                    },
                    {
                        "type": "subtitle",
                        "content": "Čo je STM32CubeIDE?"
                    },
                    {
                        "type": "text",
                        "content": "STM32CubeIDE je integrované vývojové prostredie (IDE) na vývoj v jazykoch C/C++ pre STM32 mikrokontroléry. Kombinuje vývoj kódu, konfiguráciu periférií, generovanie kódu, kompiláciu a ladenie do jednej platformy. STM32CubeIDE je postavené na rámci Eclipse a obsahuje nástroj STM32CubeMX, ktorý zjednodušuje konfiguráciu periférií mikrokontrolérov a generuje inicializačný kód."
                    },
                    {
                        "type": "image",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735162311/4d8c0b80-7bed-11e9-9338-fb7021245dd1_x6y5ir.png",
                        "alt": "STMCubeIDE image."
                    },
                    {
                        "type": "subtitle",
                        "content": "Prečo potrebujete STM32CubeIDE?"
                    },
                    {
                        "type": "bullet", 
                        "item": "Zjednodušená konfigurácia periférií:",
                        "description": "Manuálne nastavovanie periférií mikrokontrolérov je časovo náročné a náchylné na chyby. STM32CubeMX tento proces automatizuje a plynulo sa integruje do IDE." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Rámec kódu:",
                        "description": "Generuje pripravený inicializačný kód, ktorý šetrí čas a zaisťuje správne konfigurácie." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Komplexné nástroje na ladenie:",
                        "description": "STM32CubeIDE poskytuje pokročilé nástroje na ladenie, ako sú zobrazenie registrov a pamäte, sledovanie premenných v reálnom čase a analýzu porúch na rýchle diagnostikovanie a opravu problémov." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Jednotná integrovaná platforma:",
                        "description": "Kombinuje vývoj, konfiguráciu, generovanie kódu a ladenie do jedného prostredia, čím eliminuje potrebu samostatných nástrojov." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Podpora viacerých platforiem:",
                        "description": "Funguje na Windows, Linuxe a macOS, čo z neho robí prístupný nástroj pre široké spektrum vývojárov." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Flexibilita na báze Eclipse:",
                        "description": "Umožňuje integráciu s pluginmi a ďalšími nástrojmi z ekosystému Eclipse, čím rozširuje jeho funkcionalitu." 
                    },
                    {
                        "type": "text",
                        "content": "STM32CubeIDE je nevyhnutný nástroj na vývoj softvéru pre STM32 mikrokontroléry. Zjednodušuje konfiguráciu hardvéru, urýchľuje vývoj a poskytuje robustné nástroje na ladenie a analýzu. Je ideálnou voľbou pre prácu s mikrokontrolérmi STM."
                    },
                    {
                        "type": "title",
                        "content": "FreeRTOS"
                    },
                    {
                        "type": "subtitle",
                        "content": "Čo je RTOS?"
                    },
                    {
                        "type": "text",
                        "content": "RTOS (Real-Time Operating System) je špecializovaný operačný systém určený na správu hardvérových zdrojov a vykonávanie úloh s presným načasovaním a predvídateľnosťou. Na rozdiel od univerzálnych operačných systémov, ktoré sa zameriavajú na maximalizáciu priepustnosti a odozvy používateľov, RTOS zaisťuje, že kritické úlohy spĺňajú prísne časové termíny. Tento determinizmus sa dosahuje prostredníctvom plánovača, ktorý uprednostňuje úlohy na základe ich naliehavosti a dôležitosti, čo umožňuje systému reagovať na udalosti v rámci definovaných časových obmedzení. RTOS sú nevyhnutné vo vstavaných systémoch, kde sú včasné a spoľahlivé reakcie rozhodujúce, napríklad v automobilových ovládacích prvkoch, zdravotníckych pomôckach a priemyselnej automatizácii."
                    },
                    {
                        "type": "subtitle",
                        "content": "Čo je FreeRTOS? "
                    },
                    {
                        "type": "text",
                        "content": "FreeRTOS je populárny open-source RTOS navrhnutý tak, aby bol ľahký a efektívny, vďaka čomu je vhodný pre mikrokontroléry a malé embedded systémy. FreeRTOS, vyvinutý viac ako 15 rokov v spolupráci s poprednými výrobcami čipov, poskytuje vysokokvalitné jadro komerčnej kvality v reálnom čase. Ponúka základné funkcie plánovania v reálnom čase, komunikáciu medzi úlohami, načasovanie a synchronizáciu. Zatiaľ čo samotný FreeRTOS sa zameriava na to, aby bol jadrom v reálnom čase (alebo výkonným riaditeľom v reálnom čase), ďalšie funkcie, ako sú rozhrania príkazovej konzoly a sieťové zásobníky, môžu byť pridané prostredníctvom doplnkových komponentov. Táto modularita zaisťuje, že FreeRTOS zostáva kompaktný a prispôsobiteľný rôznym vstavaným aplikáciám bez réžie plnohodnotného operačného systému."
                    },
                    {
                        "type": "subtitle",
                        "content": "Na čo sa FreeRTOS používa?"
                    },
                    {
                        "type": "text",
                        "content": "FreeRTOS sa primárne používa v embedded systémoch, kde sú zdroje obmedzené a výkon v reálnom čase je kritický. Typické aplikácie zahŕňajú:"
                    },
                    {
                        "type": "bullet", 
                        "item": "Projekty založené na mikrokontroléroch:",
                        "description": "Ideálne pre zariadenia, ktoré vykonávajú špecifické, vyhradené úlohy bez potreby úplného operačného systému." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Automobilové systémy:",
                        "description": "Používa sa v riadiacich jednotkách motora, informačno-zábavných systémoch a aplikáciách súvisiacich s bezpečnosťou, kde je nevyhnutná včasná reakcia." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Priemyselná automatizácia:",
                        "description": "Riadi stroje, robotiku a systémy riadenia procesov, ktoré vyžadujú presné načasovanie a spoľahlivosť." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Spotrebná elektronika:",
                        "description": "Poháňa zariadenia, ako sú inteligentné spotrebiče, nositeľné technológie a gadgety IoT, ktoré vyžadujú efektívnu a deterministickú prevádzku." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Zdravotnícke pomôcky:",
                        "description": "Zabezpečuje, aby kritické zdravotnícke zariadenia fungovali spoľahlivo a rýchlo reagovali na vstupy používateľov a údaje zo senzorov." 
                    },
                    {
                        "type": "title",
                        "content": "Ackermannovo riadenie"
                    },
                    {
                        "type": "subtitle",
                        "content": "Čo je Ackermannovo riadenie?"
                    },
                    {
                        "type": "text",
                        "content": "<a href='https://raw.org/book/kinematics/ackerman-steering/' target='_blank'> Ackermannovo riadenie</a> je spôsob, akým vozidlá otáčajú kolesá tak, aby každé koleso pri zatáčaní sledovalo správnu cestu. Predstavte si, že auto odbočuje za roh: vnútorné kolesá sa musia otáčať prudšie ako vonkajšie kolesá. Riadenie Ackermann zaisťuje, že to prebieha hladko a pomáha autu efektívne zatáčať bez trenia pneumatík o cestu."
                    },
                    {
                        "type": "subtitle",
                        "content": "Ako to funguje?"
                    },
                    {
                        "type": "text",
                        "content": "Keď otočíte volantom, Ackermannovo riadenie upraví uhly predných kolies. Vnútorné koleso (to bližšie k stredu zákruty) sa otáča viac ako vonkajšie koleso. Toto nastavenie zaisťuje, že sa všetky kolesá pohybujú spôsobom, ktorý zodpovedá zákrute, vďaka čomu je jazda plynulejšia a znižuje sa opotrebovanie pneumatík."
                    },
                    {
                        "type": "subtitle",
                        "content": "Kde sa používa Ackermannovo riadenie?"
                    },
                    {
                        "type": "bullet", 
                        "item": "Automobilov a ľahkých vozidiel: ",
                        "description": "Väčšina bežných áut používa tento riadiaci systém, aby ľahšie zvládali zákruty a zabránili rýchlemu opotrebovaniu pneumatík." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Pretekárskych vozidlá:",
                        "description": "Vysokorýchlostné autá využívajú Ackermannovo riadenie na rýchlejšie a bezpečnejšie prechádzanie zákrutami na pretekárskych okruhoch." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Nákladných vozidlá a stroje:",
                        "description": "Veľké vozidlá ako traktory a vysokozdvižné vozíky ho používajú na navigáciu v úzkych priestoroch a nerovnom teréne." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Bicyklov a motocyklov:",
                        "description": "Aj keď nie vždy presne rovnaké, tento princíp pomáha týmto vozidlám zatáčať stabilne." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Autonómnych vozidiel a robotov:",
                        "description": "Samoriadiace autá a roboty používajú princípy Ackermannovho riadenia na presné pohyby a správne sledovanie trás." 
                    },
                    {
                        "type": "subtitle",
                        "content": "Výhody Ackermannovho riadenia"
                    },
                    {
                        "type": "bullet", 
                        "item": "Dlhšia životnosť pneumatík:",
                        "description": "Kolesá sa otáčajú správne, takže pneumatiky sa neužívajú tak rýchlo." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Lepšia kontrola:",
                        "description": "Vozidlá plynulejšie a predvídateľnejšie zvládajú zákruty." 
                    },
                    {
                        "type": "bullet", 
                        "item": "Efektívne zatáčanie:",
                        "description": "Znižuje zbytočné trenie, čo uľahčuje zatáčanie a šetrí energiu." 
                    },
                    {
                        "type": "text",
                        "content": "Riadenie Ackermann je veľmi populárne v automobilových a robotických aplikáciách vďaka svojej schopnosti optimalizovať účinnosť otáčania a minimalizovať opotrebovanie pneumatík, zabezpečením správneho vyrovnania kolies počas zatáčania. Jeho dizajn je vhodný najmä pre vozidlá, ktoré vyžadujú presnú manévrovateľnosť, ako sú osobné automobily, nákladné autá a robotické plošiny. Jednoduchosť a účinnosť mechanizmu z neho robia voľbu pre inžinierov vyvíjúcich systémy, ktoré uprednostňujú stabilitu a kontrolu."
                    }
                ] 
            }
        ],
        "exercises": [
            { 
                "id": "exercise-2-1", 
                "name": "Cvičenie 2.1 - Stiahnite si STMCubeIDE vývojové prostredie", 
                "description": [
                    {
                        "type": "text",
                        "content": "Stiahnite si najnovšiu verziu vývojového prostredia STM32CubeIDE <a href='https://www.st.com/en/development-tools/stm32cubeide.html' target='_blank'>tu</a> a počas inštalácie ponechajte všetky parametre na predvolených nastaveniach."
                    },
                    { 
                        "type": "title", 
                        "content": "Vytvorte svoj prvý projekt" 
                    },
                    {
                        "type": "subtitle",
                        "content": "1. Vytvorte svoj prvý pracovný priestor"
                    },
                    {
                        "type": "text",
                        "content": "Vyberte požadované umiestnenie alebo ho ponechajte na predvolenom nastavení."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735568856/1_rhgpzx.png",
                        "alt": "Snímka obrazovky výberu pracovného priestoru"
                    },
                    {
                        "type": "subtitle",
                        "content": "2. Vytvorte projekt"
                    },
                    {
                        "type": "text",
                        "content": "Kliknite na File -> New -> STM32 Project."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735568857/2_v6bvmb.png",
                        "alt": "Vytvorenie STM32 projektu"
                    },
                    {
                        "type": "subtitle",
                        "content": "3. Vyberte čip"
                    },
                    {
                        "type": "text",
                        "content": "V poli Commercial Part Number vyhľadajte a vyberte čip <strong>STM32F103RCT6</strong>, potom ho zvoľte zo zoznamu MCUs/MPUs List a kliknite na Next v pravom dolnom rohu pre prechod na ďalší krok."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735568857/3_imq3j1.png",
                        "alt": "Výber STM32 čipu"
                    },
                    {
                        "type": "subtitle",
                        "content": "4. Pomenujte svoj projekt"
                    },
                    {
                        "type": "text",
                        "content": "Pomenujte svoj projekt a ponechajte options na predvolenom nastavení."
                    },
                    {
                        "type": "subtitle",
                        "content": "5. Kliknite na Yes pre načítanie grafického obsahu"
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735568857/5_mburuq.png",
                        "alt": "prompt to click yes"
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735568857/6_l2jnqw.png",
                        "alt": "Načítané prostredie"
                    },
                    {
                        "type": "title",
                        "content": "Vykonajte všetky potrebné konfigurácie"
                    },
                    {
                        "type": "subtitle",
                        "content": "1. Nastavenie ladenia"
                    },
                    {
                        "type": "text",
                        "content": "Kliknite na Pinout & Configuration, vyberte System Core -> SYS -> Debug a zvoľte Serial Wire. Táto konfigurácia umožňuje efektívne ladenie a analýzu mikrokontroléra STM32 počas vývoja."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735571368/7_q58zpp.png",
                        "alt": "Nastavenie ladenia pomocou Serial Wire"
                    },
                    {
                        "type": "subtitle",
                        "content": "2. Modifikujte systémový takt"
                    },
                    {
                        "type": "text",
                        "content": "Externý kryštálový oscilátor má frekvenciu 8M. Kryštálový oscilátor generuje stabilný hodinový signál potrebný pre chod mikrokontroléra. Modifikácia frekvencie zabezpečí optimálnu prevádzku a stabilitu."
                    },
                    {
                        "type": "text",
                        "content": "V Pinout & Configuration vyberte RCC -> HSE a zvoľte Crystal/Ceramic Resonator. HSE je externý takt, zatiaľ čo LSE je interný takt. Externý takt je stabilnejší a efektívnejší ako interný."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735571368/8_iv2awz.png",
                        "alt": "Nastavenie HSE na Crystal/Ceramic Resonator"
                    },
                    {
                        "type": "text",
                        "content": "Prepnite na Clock Configuration, nastavte frekvenciu HCLK na 72, stlačte Enter na potvrdenie a následne kliknite na OK v popup okne Clock Wizard."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735571369/9_ylhlls.png",
                        "alt": "Modifikácia frekvencie na 72MHz"
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735571369/10_mhmnqu.png",
                        "alt": "Clock Wizard okno"
                    },
                    {
                        "type": "subtitle",
                        "content": "3. Konfigurácia LED pinu"
                    },
                    {
                        "type": "text",
                        "content": "Nastavte pin PC13 na GPIO_Output, môžete tiež zmeniť jeho označenie na LED pre zjednodušenie."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735571370/11_ngy78f.png",
                        "alt": "Konfigurácia LED pinu"
                    },
                    {
                        "type": "text",
                        "content": "Potom stlačte Ctrl+S na uloženie. Tento krok vygeneruje všetok potrebný kód pre nastavenia mikrokontroléra a zabezpečí pripravenosť na implementáciu."
                    },
                    {
                        "type": "title",
                        "content": "Napíšte jednoduchý kód"
                    },
                    {
                        "type": "text",
                        "content": "V súbore main.c nájdite slučku while (1). Táto slučka je nekonečná a zaisťuje, že kód vo vnútri sa vykonáva opakovane počas celého chodu programu."
                    },
                    {
                        "type": "code",
                     "content": "/* Infinite loop */\n/* USER CODE BEGIN WHILE */\nwhile (1)\n{\n    // Nastaví pin LED na logickú úroveň HIGH (zapne LED)\n    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);\n\n    // Pozastaví vykonávanie programu na 200 ms\n    HAL_Delay(200);\n\n    // Nastaví pin LED na logickú úroveň LOW (vypne LED)\n    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);\n\n    // Pozastaví vykonávanie programu na 200 ms\n    HAL_Delay(200);\n}\n/* USER CODE END WHILE */\n\n/* USER CODE BEGIN 3 */\n/* USER CODE END 3 */"
                    },
                    {
                        "type": "text",
                        "content": "V tejto slučke sa vykonáva striedavé zapínanie a vypínanie LED diódy každých 200 milisekúnd. Funkcia HAL_GPIO_WritePin nastaví pin LED na vysokú (zapnutú) alebo nízku (vypnutú) úroveň, zatiaľ čo HAL_Delay pozastaví vykonávanie programu na zadaný čas v milisekundách."
                    },
                    {
                        "type": "text",
                        "content": "Kód musíte písať medzi značky USER CODE BEGIN a USER CODE END, pretože obsah mimo týchto značiek bude prepísaný pri ďalšej generácii kódu grafickým nástrojom. Tieto značky zaisťujú, že váš vlastný kód zostane zachovaný. Nezapisujte čínske komentáre, pretože môžu spôsobiť zobrazenie nečitateľných znakov."
                    },
                    {
                        "type": "title",
                        "content": "Kompilácia"
                    },
                    {
                        "type": "subtitle",
                        "content": "1. Pridanie funkcie na generovanie hex súborov"
                    },
                    {
                        "type": "text",
                        "content": "Kliknite na Project -> Properties -> C/C++ Build -> Settings -> MCU Post build outputs a následne zaškrtnite možnosť Convert to Intel Hex file (-O ihex), ako je znázornené na nasledujúcom obrázku."
                    },
                    {
                        "type": "text",
                        "content": "Použitie hex súborov je dôležité, pretože sú široko akceptované a umožňujú jednoduchý a bezchybný prenos programu do mikrokontroléra cez programátory a nástroje na nahrávanie."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735575828/12_qwvttg.png",
                        "alt": "Voľba na generovanie hex súborov"
                    },
                    {
                        "type": "subtitle",
                        "content": "2. Kompilácia programu"
                    },
                    {
                        "type": "text",
                        "content": "Na kompiláciu projektu kliknite na ikonu kladiva v paneli nástrojov."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735575828/13_izv1zd.png",
                        "alt": "Kompilácia programu cez ikonu kladiva"
                    },
                    {
                        "type": "subtitle",
                        "content": "3. Úspešná kompilácia"
                    },
                    {
                        "type": "text",
                        "content": "Po kompilácii by konzola mala zobrazovať žiadne chyby a ideálne ani žiadne varovania. Súbor your-project-name.hex bude uvedený ako vygenerovaný."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735576082/14_yuidhe.png",
                        "alt": "Výsledok úspešnej kompilácie"
                    },
                    {
                        "type": "title",
                        "content": "Nahrať program"
                    },
                    {
                        "type": "subtitle",
                        "content": "1. Stiahnite potrebný ovládač"
                    },
                    {
                        "type": "text",
                        "content": "Pre správnu komunikáciu cez USB na rozširujúcej doske Rosmaster je potrebné nainštalovať ovládač čipu CH340. Ak bol predtým na počítači nainštalovaný ovládač CH340 (napríklad pri používaní Arduino softvéru), nie je potrebné ho znovu inštalovať. Ovládač nájdete na tomto odkaze: <a href='https://learn.sparkfun.com/tutorials/how-to-install-ch340-drivers/all' target='_blank'>CH340 Driver</a>."
                    },
                    {
                        "type": "text",
                        "content": "Spustite stiahnutý súbor .exe a kliknite na tlačidlo Inštalovať."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735579668/15_hubdhy.png",
                        "alt": "Inštalácia ovládača CH340"
                    },
                    {
                        "type": "subtitle",
                        "content": "2. Stiahnite softvér na nahrávanie"
                    },
                    {
                        "type": "text",
                        "content": "Tento krok vyžaduje mcuisp (alebo flymcu) softvér na nahrávanie firmvéru mikrokontroléra rozširujúcej dosky Rosmaster. Softvér môžete stiahnuť z <a href='http://www.mcuisp.com/' target='_blank'>oficiálnej stránky mcuisp</a>. Mcuisp je prenosný softvér (green version), ktorý nevyžaduje inštaláciu. Stačí ho otvoriť dvojklikom."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735579669/16_gywqv6.png",
                        "alt": "Inštalácia flymcu"
                    },
                    {
                        "type": "text",
                        "content": "Tento softvér je potrebný na zápis firmvéru do mikrokontroléra na rozširujúcej doske Rosmaster. Zabezpečuje správny a bezchybný prenos súborov."
                    },
                    {
                        "type": "subtitle",
                        "content": "3. Pripojte zariadenie"
                    },
                    {
                        "type": "text",
                        "content": "Pred pripojením Rosmastera k počítaču odpojte Micro USB dátový kábel a napájací kábel, ktorý spája rozširujúcu dosku s Jetson Nano."
                    },
                    {
                        "type": "text",
                        "content": "Zasuňte jeden koniec USB dátového kábla do USB portu počítača a druhý koniec do Micro USB portu na rozširujúcej doske Rosmaster."
                    },
                    {
                        "type": "subtitle",
                        "content": "4. Konfigurácia nahrávacieho softvéru"
                    },
                    {
                        "type": "bullet",
                        "item": "Vyberte port:",
                        "description": "Vyberte správny port USB, ku ktorému je zariadenie pripojené."
                    },
                    {
                        "type": "bullet",
                        "item": "Vyberte firmvér:",
                        "description": "Zadajte cestu k hex súboru firmvéru, ktorý chcete nahrať."
                    },
                    {
                        "type": "bullet",
                        "item": "Vyberte možnosti nahrávania:",
                        "description": "Uistite sa, že ste vybrali možnosť DTR low-level reset, RTS high-level into BootLoader. Ak túto možnosť nevyberiete, nahrávanie môže zlyhať."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735579671/17_kma3gz.png",
                        "alt": "Konfigurácia nahrávacieho softvéru"
                    },
                    {
                        "type": "subtitle",
                        "content": "5. Nahrajte program"
                    },
                    {
                        "type": "text",
                        "content": "Najprv je potrebné prepnúť mikrokontrolér na rozširujúcej doske do programovacieho režimu: Stlačte a podržte tlačidlo BOOT0 na rozširujúcej doske, potom stlačte tlačidlo RESET a nakoniec uvoľnite tlačidlo BOOT0."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735579671/18_gcsjwj.png",
                        "alt": "Kliknite na tlačidlo Start ISP(P)"
                    },
                    {
                        "type": "text",
                        "content": "Kliknite na tlačidlo Start ISP(P), a mcuisp softvér nahraje vybraný firmvér do mikrokontroléra na rozširujúcej doske Rosmaster. Po úspešnom dokončení sa na pravej strane objaví hlásenie: www.mcuisp.com: Mission Complete, Anything Ok!!!. LED na rozširujúcej doske bude blikať každých 200 ms."
                    }
                    
                ]
            },
            {
                "id": "exercise-2-2",
                "name": "Cvičenie 2.2 - Ovládanie bzučiaka bez a s použitím FreeRTOS",
                "description": [
                    {
                        "type": "text",
                        "content": "V tomto cvičení implementujeme program na ovládanie bzučiaka bez a s použitím FreeRTOS a preskúmame rozdiely v implementáciách a výsledkoch. Nižšie je uvedená tabuľka, ktorá ukazuje základné rozdiely medzi týmito dvoma implementáciami."
                    },                    
                    {
                        "type": "title",
                        "content": "Rozdiel medzi bez FreeRTOS a s FreeRTOS"
                    },
                    {
                        "type": "table",
                        "columns": ["Aspekt", "Bez FreeRTOS", "S FreeRTOS"],
                        "rows": [
                            {
                                "Aspekt": "Model vykonávania",
                                "Bez FreeRTOS": "Sekvenčné vykonávanie pomocou jednej slučky while(1).",
                                "S FreeRTOS": "Súbežné vykonávanie viacerých úloh."
                            },
                            {
                                "Aspekt": "Spracovanie úloh",
                                "Bez FreeRTOS": "Úlohy (napr. ovládanie LED, bzučiaka) sú spracované v tej istej slučke.",
                                "S FreeRTOS": "Úlohy sú rozdelené do samostatných vlákien s prioritami."
                            },
                            {
                                "Aspekt": "Odozva",
                                "Bez FreeRTOS": "Pomalšia odozva na udalosti, ako je stlačenie tlačidla, kvôli sekvenčnému spracovaniu.",
                                "S FreeRTOS": "Rýchlejšia odozva na udalosti, pretože úlohy sa spracovávajú paralelne."
                            },
                            {
                                "Aspekt": "Komplexnosť kódu",
                                "Bez FreeRTOS": "Jednoduchšie, ale ťažšie spravovateľné s rastúcou funkčnosťou.",
                                "S FreeRTOS": "Komplexnejšie, ale ľahšie spravovateľné pre veľké projekty."
                            },
                            {
                                "Aspekt": "Škálovateľnosť",
                                "Bez FreeRTOS": "Obmedzená škálovateľnosť; pridávanie ďalších funkcií zvyšuje zložitosť slučky.",
                                "S FreeRTOS": "Vysoko škálovateľné; úlohy sú modulárne a spravované FreeRTOS."
                            },
                            {
                                "Aspekt": "Zdieľanie zdrojov",
                                "Bez FreeRTOS": "Vyžaduje manuálne zdieľanie a správu stavu.",
                                "S FreeRTOS": "FreeRTOS spravuje zdieľanie zdrojov a synchronizáciu."
                            },
                            {
                                "Aspekt": "Časovanie",
                                "Bez FreeRTOS": "Oneskorenia blokujú všetky operácie.",
                                "S FreeRTOS": "Oneskorenia ovplyvňujú iba konkrétnu úlohu, ostatné úlohy pokračujú."
                            }
                        ]
                    },
                    {
                        "type": "title",
                        "content": "Bez FreeRTOS"
                    },
                    {
                        "type": "text",
                        "content": "Najprv vytvoríme program na ovládanie bzučiaka bez použitia FreeRTOS, teda bez multithreadingu. Všetky operácie budú spracované v jednej slučke (napríklad while(1)), kde kód vykonáva jednotlivé úlohy sekvenčne, jedna po druhej. Tento prístup je jednoduchý, ale s rastúcou komplexnosťou aplikácie môže byť správa a pridávanie nových funkcií náročnejšie. Navyše, ak dôjde k oneskoreniu (napríklad HAL_Delay), všetky ostatné operácie sú pozastavené, čo môže spôsobiť pomalšiu odozvu systému."
                    },
                    {
                        "type": "title",
                        "content": "Vykonajte všetky potrebné konfigurácie"
                    },
                    {
                        "type": "subtitle",
                        "content": "Importujte .ioc súbor z predchádzajúceho cvičenia"
                    },
                    {
                        "type": "text",
                        "content": "Aby sme ušetrili čas a mohli využiť konfigurácie z predchádzajúcich projektov, namiesto vytvorenia úplne nového STM32 projektu môžeme vytvoriť nový STM32 projekt z existujúceho konfiguračného súboru. Tento prístup nám umožňuje použiť už nakonfigurované nastavenia bez potreby manuálneho nastavovania."
                    },
                    {
                        "type": "text",
                        "content": "Zvoľme túto možnosť cez File -> New -> STM32 Project from an Existing STM32CubeMX Configuration File (.ioc)."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735593447/20_vkq6mw.png",
                        "alt": "Výber možnosti na vytvorenie projektu zo súboru .ioc"
                    },
                    {
                        "type": "text",
                        "content": "Potom vyberte .ioc súbor z predchádzajúceho cvičenia a pomenujte nový projekt primerane."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735593446/19_zptdve.png",
                        "alt": "Výber a pomenovanie nového projektu zo súboru .ioc"
                    },
                    {
                        "type": "subtitle",
                        "content": "Konfigurácia pinov"
                    },
                    {
                        "type": "text",
                        "content": "Musíme nakonfigurovať piny pre bzučiak ako výstup a tlačidlo ako vstup a zároveň ich pomenovať primerane. Bzučiak pomenujeme ako BEEP a tlačidlo ako KEY1."
                    },
                    {
                        "type": "text",
                        "content": "Bzučiak je pripojený na pin PC5 STM32 čipu. Musíte nastaviť PC5 do režimu GPIO_Output."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735594133/21_ir1qcq.png",
                        "alt": "Konfigurácia pinu PC5 ako GPIO_Output pre bzučiak"
                    },
                    {
                        "type": "text",
                        "content": "Tlačidlo je pripojené na pin PD2. Musíte nastaviť PD2 do režimu GPIO_Input."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735594134/22_zdedqg.png",
                        "alt": "Konfigurácia pinu PD2 ako GPIO_Input pre tlačidlo"
                    },
                    {
                        "type": "text",
                        "content": "Nezabudnite stlačiť Ctrl+S na vygenerovanie kódu."
                    },
                    {
                        "type": "title",
                        "content": "Upravte štruktúru súborov"
                    },
                    {
                        "type": "subtitle",
                        "content": "Vytvorte nový priečinok so zdrojovým kódom"
                    },
                    {
                        "type": "text",
                        "content": "Pre jednoduchšiu správu vytvoríme nový priečinok zdrojového kódu BSP. BSP znamená Board Support Package a pomáha zjednodušiť správu kódu tým, že organizuje funkcie a inicializáciu hardvéru na jednom mieste. Kliknite pravým tlačidlom myši na názov projektu -> New -> Source Folder a pomenujte priečinok ako BSP."
                    },
                    {
                        "type": "subtitle",
                        "content": "Pridajte nový priečinok do prostredia"
                    },
                    {
                        "type": "text",
                        "content": "Kliknite na Project -> Properties -> C/C++ Build -> Settings -> MCU GCC Compiler -> Include Paths, a potom kliknite na tlačidlo Add a vyplňte ../BSP a uložte zmeny."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735595787/23_onf6gi.png",
                        "alt": "Pridanie BSP priečinka do nastavení projektu"
                    },
                    {
                        "type": "subtitle",
                        "content": "Pridajte súbory do nového priečinka"
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735595788/24_zal7n2.png",
                        "alt": "Pridané BSP súbory do nového priečinka"
                    },
                    {
                        "type": "text",
                        "content": "Budete musieť pridať tri páry súborov s názvami uvedenými na obrázku: bsp_key.h/bsp_key.c, bsp_beep.h/bsp_beep.c a bsp.h/bsp.c."
                    },
                    {
                        "type": "title",
                        "content": "Zapíšte nasledujúci kód do týchto súborov"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp_key.c"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp_key.c */\n#include \"bsp_key.h\"\n#include \"bsp.h\"\n\n// Kontrola, či je tlačidlo stlačené. Ak áno, vráti KEY_PRESS, inak KEY_RELEASE.\nstatic uint8_t Key1_is_Press(void) {\n    if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)) {\n        return KEY_PRESS;  // Tlačidlo je stlačené\n    }\n    return KEY_RELEASE;    // Tlačidlo je uvoľnené\n}\n\n// Čítanie stavu tlačidla K1.\n// mode: 0 - stlačenie vždy vráti KEY_PRESS\n//       1 - KEY_PRESS sa vráti len raz za každé stlačenie\nuint8_t Key1_State(uint8_t mode) {\n    static uint16_t key1_state = 0;\n\n    if (Key1_is_Press() == KEY_PRESS) {\n        if (key1_state < (mode + 1) * 2) {\n            key1_state++;\n        }\n    } else {\n        key1_state = 0;  // Obnovenie stavu pri uvoľnení tlačidla\n    }\n\n    if (key1_state == 2) {\n        return KEY_PRESS;\n    }\n\n    return KEY_RELEASE;\n}"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp_key.h"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp_key.h */\n#ifndef BSP_KEY_H_\n#define BSP_KEY_H_\n\n#include \"stm32f1xx_hal.h\"\n#include \"stm32f1xx_hal_gpio.h\"\n\n/* Definície stavov tlačidiel */\n#define KEY_PRESS         1\n#define KEY_RELEASE       0\n\n/* Definície režimov tlačidiel */\n#define KEY_MODE_ONE_TIME 1\n#define KEY_MODE_ALWAYS   0\n\n/* Deklarácie funkcií */\nuint8_t Key1_State(uint8_t mode);\n\n#endif /* BSP_KEY_H_ */"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp_beep.h"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp_beep.h */\n#ifndef BSP_BEEP_H_\n#define BSP_BEEP_H_\n\n#include \"main.h\"\n\n/* Definície stavov bzučiaka */\n#define BEEP_STATE_OFF          0\n#define BEEP_STATE_ON_ALWAYS    1\n#define BEEP_STATE_ON_DELAY     2\n\n/* Makrá na ovládanie bzučiaka */\n#define BEEP_ON()     HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, SET)\n#define BEEP_OFF()    HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, RESET)\n\n/* Deklarácie funkcií */\nvoid Beep_Timeout_Close_Handle(void);\nvoid Beep_On_Time(uint16_t time);\n\n#endif /* BSP_BEEP_H_ */"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp_beep.c"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp_beep.c */\n#include \"bsp_beep.h\"\n#include \"bsp.h\"\n\nstatic uint16_t beep_on_time = 0;\nstatic uint8_t beep_state = 0;\n\n// Nastavenie času bzučiaka\nstatic void Beep_Set_Time(uint16_t time) {\n    beep_on_time = time;\n}\n\n// Získanie zostávajúceho času bzučiaka\nstatic uint16_t Beep_Get_Time(void) {\n    return beep_on_time;\n}\n\n// Nastavenie stavu bzučiaka\nstatic void Beep_Set_State(uint8_t state) {\n    beep_state = state;\n}\n\n// Získanie aktuálneho stavu bzučiaka\nstatic uint8_t Beep_Get_State(void) {\n    return beep_state;\n}\n\n// Aktivácia bzučiaka na určitý čas\nvoid Beep_On_Time(uint16_t time) {\n    if (time == BEEP_STATE_ON_ALWAYS) {\n        Beep_Set_State(BEEP_STATE_ON_ALWAYS);\n        Beep_Set_Time(0);\n        BEEP_ON();\n    } else if (time == BEEP_STATE_OFF) {\n        Beep_Set_State(BEEP_STATE_OFF);\n        Beep_Set_Time(0);\n        BEEP_OFF();\n    } else {\n        if (time >= 10) {\n            Beep_Set_State(BEEP_STATE_ON_DELAY);\n            Beep_Set_Time(time / 10);\n            BEEP_ON();\n        }\n    }\n}\n\n// Automatické vypnutie bzučiaka po uplynutí času (volá sa každých 10 ms)\nvoid Beep_Timeout_Close_Handle(void) {\n    if (Beep_Get_State() == BEEP_STATE_ON_DELAY) {\n        if (Beep_Get_Time()) {\n            beep_on_time--;\n        } else {\n            BEEP_OFF();\n            Beep_Set_State(BEEP_STATE_OFF);\n        }\n    }\n}"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp.h"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp.h */\n#ifndef BSP_H_\n#define BSP_H_\n\n#include \"main.h\"\n#include \"stm32f1xx_hal_gpio.h\"\n#include \"stm32f1xx_hal.h\"\n#include \"stm32f103xe.h\"\n#include \"bsp_beep.h\"\n#include \"bsp_key.h\"\n\n#define LED_ON()         HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET)\n#define LED_OFF()        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET)\n#define LED_TOGGLE()     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin)\n\nvoid Bsp_Init(void);\nvoid Bsp_Loop(void);\nvoid Bsp_Led_Show_State_Handle(void);\n\n#endif /* BSP_H_ */"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp.c"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp.c */\n#include \"bsp.h\"\n\n// Zobrazovanie aktuálneho stavu pomocou LED, volá sa každých 10 ms.\nvoid Bsp_Led_Show_State_Handle(void) {\n    static uint8_t led_count = 0;\n    led_count++;\n    if (led_count > 20) {\n        led_count = 0;\n        LED_TOGGLE();\n    }\n}\n\n// Inicializácia periférnych zariadení\nvoid Bsp_Init(void) {\n    Beep_On_Time(50);\n}\n\n// Funkcia volaná v hlavnej slučke main.c na minimalizáciu zmien v main.c\nvoid Bsp_Loop(void) {\n    if (Key1_State(KEY_MODE_ONE_TIME)) {\n        Beep_On_Time(50);\n    }\n    Bsp_Led_Show_State_Handle();\n    Beep_Timeout_Close_Handle();\n    HAL_Delay(10);\n}"
                    },
                    {
                        "type": "subtitle",
                        "content": "Importujte súbor bsp.h v main.c"
                    },
                    {
                        "type": "code",
                        "content": "/* Private includes */\n/* USER CODE BEGIN Includes */\n#include \"bsp.h\"\n/* USER CODE END Includes */"
                    },
                    {
                        "type": "subtitle",
                        "content": "Zavolajte Bsp_Init() vo funkcii main"
                    },
                    {
                        "type": "code",
                        "content": "/* Initialize all configured peripherals */\nMX_GPIO_Init();\n/* USER CODE BEGIN 2 */\nBsp_Init();\n/* USER CODE END 2 */"
                    },
                    {
                        "type": "subtitle",
                        "content": "Zavolajte Bsp_Loop() vo while(1)"
                    },
                    {
                        "type": "code",
                        "content": "/* Infinite loop */\n/* USER CODE BEGIN WHILE */\nwhile (1)\n{\n    Bsp_Loop();\n/* USER CODE END WHILE */\n\n/* USER CODE BEGIN 3 */\n}\n/* USER CODE END 3 */"
                    },
                    {
                        "type": "subtitle",
                        "content": "Kompilácia a nahranie programu"
                    },
                    {
                        "type": "text",
                        "content": "Najprv skompilujte kód a vygenerujte hex súbor. Uistite sa, že voľba na generovanie hex súboru je povolená v nastaveniach projektu. Po úspešnej kompilácii nahrajte hex súbor na rozširujúcu dosku pomocou nahrávacieho softvéru."
                    },
                    {
                        "type": "subtitle",
                        "content": "Výsledky programu"
                    },
                    {
                        "type": "text",
                        "content": "Po nahratí programu do rozširujúcej dosky by mal bzučiak zazvoniť na 50 milisekúnd, LED svetlo bude blikať každých 200 milisekúnd a bzučiak zazvoní na 50 milisekúnd pri každom stlačení tlačidla. Týmto sme úspešne implementovali základný program na ovládanie periférií bez použitia FreeRTOS."
                    },
                    {
                        "type": "text",
                        "content": "Tento prístup nám umožnil pochopiť, ako pracovať so slučkou while(1) a manuálne spravovať udalosti, ako je stlačenie tlačidla a oneskorenia. Avšak, tento spôsob má svoje obmedzenia, hlavne ak sa pokúsime pridať ďalšie úlohy alebo zložitejšie funkcie. Napríklad oneskorenia môžu blokovať iné operácie a pridávanie nových funkcií môže zvýšiť zložitosť hlavnej slučky."
                    },
                    {
                        "type": "subtitle",
                        "content": "Prechod na FreeRTOS"
                    },
                    {
                        "type": "text",
                        "content": "Tu prichádza na scénu FreeRTOS. Prechádzame na implementáciu, ktorá využíva multitasking, čím oddeľujeme jednotlivé funkcie do samostatných úloh. To umožňuje efektívnejšie spracovanie úloh, vyššiu škálovateľnosť a lepšiu odozvu na udalosti. V ďalšej časti uvidíme, ako pretransformujeme tento program na použitie s FreeRTOS a preskúmame jeho výhody."
                    },
                    {
                        "type": "title",
                        "content": "S FreeRTOS"
                    },
                    {
                        "type": "text",
                        "content": "FreeRTOS prináša možnosť multitaskingu, čo umožňuje spracovávať jednotlivé úlohy paralelne namiesto sekvenčného vykonávania. Tento prístup zlepšuje odozvu systému, umožňuje lepšiu škálovateľnosť a zjednodušuje správu zložitejších programov. FreeRTOS je obzvlášť užitočný pri projektoch, kde sú rôzne úlohy (napríklad ovládanie bzučiaka, tlačidiel a LED) oddelené a majú rôzne priority."
                    },
                    {
                        "type": "title",
                        "content": "Vykonajte všetky potrebné konfigurácie"
                    },
                    {
                        "type": "subtitle",
                        "content": "Importujte .ioc súbor z predchádzajúceho projektu"
                    },
                    {
                        "type": "subtitle",
                        "content": "Konfigurácia FreeRTOS"
                    },
                    {
                        "type": "text",
                        "content": "Kliknite na Middleware -> FreertOS, vyberte CMSIS_V1, kliknite na Tasks and Queues. Predvolene bude vytvorená jedna úloha, pridajte dve nové úlohy, z ktorých jedna bude spravovať bzučiak a druhá tlačidlá. Pri pridávaní úloh zmeňte iba ich názvy, ostatné konfigurácie ponechajte predvolené."
                    },
                    {
                        "type": "image-long",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1735597668/25_m1iul8.png",
                        "alt": "Konfigurácia FreeRTOS úloh"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp_task.h"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp_task.h */\n#ifndef BSP_TASK_H_\n#define BSP_TASK_H_\n\n#include \"bsp.h\"  // Zahrnutie potrebných závislostí\n\n// Deklarácie funkcií\nvoid Task_Entity_LED(void);   // Funkcia na ovládanie LED\nvoid Task_Entity_Beep(void);  // Funkcia na ovládanie bzučiaka\nvoid Task_Entity_Key(void);   // Funkcia na ovládanie tlačidla\n\nextern int enable_beep;       // Globálna premenná na ovládanie bzučiaka\n\n#endif /* BSP_TASK_H_ */"
                    },
                    {
                        "type": "subtitle",
                        "content": "bsp_task.c"
                    },
                    {
                        "type": "code",
                        "content": "/* bsp_task.c */\n#include \"bsp.h\"\n\nint enable_beep = 0;  // Premenná určujúca, či je bzučiak aktívny\n\n// Funkcia pre úlohu ovládania LED\nvoid Task_Entity_LED(void)\n{\n    while (1)\n    {\n        // LED mení svoj stav každých 100 milisekúnd\n        LED_TOGGLE();\n        osDelay(100);\n    }\n}\n\n// Funkcia pre úlohu ovládania bzučiaka\nvoid Task_Entity_Beep(void)\n{\n    while (1)\n    {\n        if (enable_beep)\n        {\n            // Bzučiak sa zapne každých 200 milisekúnd\n            BEEP_ON();\n            osDelay(100);\n            BEEP_OFF();\n            osDelay(100);\n        }\n        else\n        {\n            // Ak je bzučiak vypnutý, zostáva vypnutý\n            BEEP_OFF();\n            osDelay(100);\n        }\n    }\n}\n\n// Funkcia pre úlohu ovládania tlačidla\nvoid Task_Entity_Key(void)\n{\n    while (1)\n    {\n        if (Key1_State(1) == KEY_PRESS)\n        {\n            // Stlačenie tlačidla prepína stav bzučiaka\n            enable_beep = !enable_beep;\n        }\n        osDelay(10);\n    }\n}"
                    },
                    {
                        "type": "subtitle",
                        "content": "main.c"
                    },
                    {
                        "type": "code",
                        "content": "/* main.c */\n#include \"bsp_task.h\"\n#include \"bsp.h\"\n\n// Funkcia pre úlohu ovládania LED\nvoid StartDefaultTask(void const * argument)\n{\n    // Volanie funkcie na ovládanie LED\n    Task_Entity_LED();\n}\n\n// Funkcia pre úlohu ovládania bzučiaka\nvoid BEEP_TASK(void const * argument)\n{\n    // Volanie funkcie na ovládanie bzučiaka\n    Task_Entity_Beep();\n}\n\n// Funkcia pre úlohu ovládania tlačidla\nvoid KEY_TASK(void const * argument)\n{\n    // Volanie funkcie na ovládanie tlačidla\n    Task_Entity_Key();\n}"
                    },
                    {
                        "type": "subtitle",
                        "content": "Kompilácia a nahranie programu"
                    },
                    {
                        "type": "text",
                        "content": "Najprv skompilujte kód a vygenerujte hex súbor. Uistite sa, že voľba na generovanie hex súboru je povolená v nastaveniach projektu. Po úspešnej kompilácii nahrajte hex súbor na rozširujúcu dosku pomocou nahrávacieho softvéru."
                    },
                    {
                        "type": "subtitle",
                        "content": "Výsledky programu"
                    },
                    {
                        "type": "text",
                        "content": "Po nahratí programu do rozširujúcej dosky bude LED svetlo blikať každých 200 milisekúnd. Po stlačení tlačidla bzučiak zapípa každých 200 milisekúnd. Po opätovnom stlačení tlačidla sa bzučiak vypne. Tento výsledok ukazuje úspešnú implementáciu úloh pomocou FreeRTOS."
                    },
                    {
                        "type": "text",
                        "content": "Použitie FreeRTOS nám umožnilo rozdeliť každú funkciu (ovládanie LED, bzučiaka a tlačidla) do samostatných úloh. To zvyšuje škálovateľnosť systému a zjednodušuje správu zložitejších projektov. Na rozdiel od prístupu bez FreeRTOS, kde sme všetko riadili v jednej slučke, tento prístup minimalizuje blokovanie operácií, ako sú oneskorenia. FreeRTOS tiež umožňuje prioritizáciu úloh, čo zlepšuje odozvu systému na udalosti. Celkovo nám FreeRTOS poskytuje lepšiu modularitu, efektívnejšie spracovanie a flexibilitu pri rozširovaní projektu."
                    }
                ]
            }
        ]
    },
    {
        "id": "module-3",
        "name": "Modul 3: Ovládanie hardvéru cez Jupyter Lab",
        "lectures": [
            { 
                "id": "lecture-3-1", 
                "name": "Prednáška 3 - Jupyter Lab",
                "description": [
                    {
                        "type": "title",
                        "content": "Čo je JupyterLab?"
                    },
                    {
                        
                        "type": "image-short",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1736265225/main-logo_x9uowl.svg",
                        "alt": "jupyter lab logo"
                        
                    },
                    {
                        "type": "text",
                        "content": "JupyterLab je najnovšie webové interaktívne vývojové prostredie pre notebooky, kód a dáta. Jeho flexibilné rozhranie umožňuje používateľom konfigurovať a usporiadať pracovné postupy v dátovej vede, vedeckých výpočtoch, výpočtovej žurnalistike a strojovom učení. Modulárny dizajn podporuje rozšírenia na rozšírenie a obohatenie funkčnosti."
                    },
                    {
                        "type": "text",
                        "content": "<em>Táto definícia je prevzatá z <a href='https://jupyter.org/' target='_blank'>oficiálnej stránky Jupyter</a>.</em>"
                    },
                    {
                        "type": "title",
                        "content": "Výhody JupyterLab pri ovládaní Rosmaster"
                    },
                    {
                        "type": "bullet",
                        "item": "Interaktívne ladenie:",
                        "description": "Umožňuje testovanie a ladenie kódu na ovládanie Rosmastera v reálnom čase."
                    },
                    {
                        "type": "bullet",
                        "item": "Podpora Pythonu a ďalších jazykov:",
                        "description": "Python je hlavným jazykom pre Rosmaster, ale JupyterLab umožňuje rozšírenie o ďalšie jazyky."
                    },
                    {
                        "type": "bullet",
                        "item": "Vizualizácia senzorových dát:",
                        "description": "Umožňuje zobrazovať dáta zo senzorov Rosmastera pomocou knižníc ako Matplotlib alebo Plotly."
                    },
                    {
                        "type": "bullet",
                        "item": "Modulárny prístup:",
                        "description": "Lepšia organizácia kontrolného kódu pre motory, senzory a kameru Rosmastera."
                    },
                    {
                        "type": "bullet",
                        "item": "Rozšíriteľnosť:",
                        "description": "Možnosť integrácie s ROS2 alebo inými nástrojmi pre pokročilé aplikácie."
                    },
                    {
                        "type": "bullet",
                        "item": "Správa súborov:",
                        "description": "Jednoduchá správa kódu a konfiguračných súborov pre projekty Rosmaster."
                    },
                    {
                        "type": "bullet",
                        "item": "Spolupráca v tíme:",
                        "description": "Umožňuje zdieľanú prácu na poznámkových blokoch a analýzu dát Rosmastera."
                    },
                    {
                        "type": "bullet",
                        "item": "Podpora dátových formátov:",
                        "description": "Práca s formátmi, ako sú CSV a JSON, ktoré Rosmaster využíva."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "text",
                        "content": "JupyterLab nám v podstate umožňuje implementovať všetky funkcie, ktoré sme vykonali pomocou STM32CubeIDE, ale s oveľa menším množstvom kódu. Použitím knižnice `Rosmaster_Lib` a jej triedy `Rosmaster` je možné ľahko a efektívne ovládať hardvér Rosmastera bez potreby manuálneho nastavovania nízkoúrovňových registrov alebo prácneho kódovania."
                    }
                ]
            }
        ],
        "exercises": [
            { 
                "id": "exercise-3-1", 
                "name": "Cvičenie 3.1 - Pripojenie k Jupyter Lab",
                "description": [
                    {
                        "type": "title",
                        "content": "Rovnaká sieť"
                    },
                    {
                        "type": "text",
                        "content": "Na pripojenie k Jupyter Lab na Rosmaster R2 musíte byť v rovnakej sieti ako robot, v našom prípade ide o sieť Technická univerzita v Košiciach. Ak nie ste v rovnakej sieti, budete musieť použiť <a href='https://uvt.tuke.sk/wps/portal/uv/sluzby/vzdialeny-pristup-vpn' target='_blank'>TUKE VPN</a>, aby ste sa mohli pripojiť k robotovi."
                    },
                    {
                        "type": "title",
                        "content": "Pripojenie cez SSH"
                    },
                    {
                        "type": "text",
                        "content": "Ďalším krokom je pripojenie k Rosmasteru cez SSH. Použite príkaz: <strong>`ssh -c aes256-ctr -p 2024 jetson@147.232.54.84`</strong>. Heslo: <strong>`yahboom`</strong>."
                    },
                    {
                        "type": "text",
                        "content": "Poznámka: AES šifrovanie nemusí byť potrebné pre všetky operačné systémy, z ktorých sa pripájate. Vyskúšajte pripojenie bez tejto možnosti, ak narazíte na problémy."
                    },
                    {
                        "type": "text",
                        "content": "Nezabudnite, že autíčko musí byť zapnuté."
                    },
                    {
                        "type": "title",
                        "content": "Pripojenie k Jupyter Lab"
                    },
                    {
                        "type": "text",
                        "content": "Najprv skontrolujte, či je Jupyter Lab nainštalovaný. Na kontrolu použite tento príkaz:"
                    },
                    {
                        "type": "code",
                        "content": "jupyter-lab --version"
                    },
                    {
                        "type": "text",
                        "content": "Ak nie je nainštalovaný, postupujte podľa nasledujúcich krokov na inštaláciu:"
                    },
                    {
                        "type": "bullet",
                        "item": "Aktualizujte zoznam balíkov:",
                        "description": "Použite tento príkaz:"
                    },
                    {
                        "type": "code",
                        "content": "sudo apt update"
                    },
                    {
                        "type": "bullet",
                        "item": "Nainštalujte Python a Pip:",
                        "description": "Použite tento príkaz:"
                    },
                    {
                        "type": "code",
                        "content": "sudo apt install python3 python3-pip -y"
                    },
                    {
                        "type": "bullet",
                        "item": "Nainštalujte Jupyter Lab:",
                        "description": "Použite tento príkaz:"
                    },
                    {
                        "type": "code",
                        "content": "pip3 install jupyterlab"
                    },
                    {
                        "type": "text",
                        "content": "Po nainštalovaní spustite Jupyter Lab nasledujúcim príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "jupyter-lab --no-browser --ip=0.0.0.0 --port=8888"
                    },
                    {
                        "type": "text",
                        "content": "Po spustení Jupyter Lab sa v konzole zobrazia odkazy na pripojenie k Jupyter Lab. Tieto odkazy obsahujú token, ktorý je potrebné použiť na prístup k rozhraniu. V našom prípade však tieto odkazy nemusia vždy fungovať. Preto musíme manuálne získať token a nakonfigurovať pripojenie."
                    },
                    {
                        "type": "text",
                        "content": "Najprv nájdite token v konzole, kde bol Jupyter Lab spustený. Potom použite nasledujúci príkaz v ďalšom termináli na vytvorenie tunela SSH:"
                    },
                    {
                        "type": "code",
                        "content": "ssh -L 8888:localhost:8888 -p 2024 jetson@147.232.54.84"
                    },
                    {
                        "type": "text",
                        "content": "Tento príkaz vytvorí tunel medzi vaším lokálnym počítačom a Rosmasterom cez port 8888. To umožní prístup k Jupyter Lab na vašom lokálnom počítači."
                    },
                    {
                        "type": "text",
                        "content": "Potom otvorte vo svojom prehliadači adresu <a href='http://localhost:8888' target='_blank'>http://localhost:8888</a> a zadajte token získaný z konzoly, aby ste získali prístup k Jupyter Lab."
                    }                    
                ]
            },
            {
                "id": "exercise-3-2",
                "name": "Cvičenie 3.2 - Základné ovládanie",
                "description": [
                    {
                        "type": "text",
                        "content": "Najprv si vytvorte nový priečinok, v ktorom budete organizovať svoj kód. Potom v tomto priečinku vytvorte nový súbor s príponou `.ipynb`. Tento typ súboru je Jupyter Notebook, ktorý vám umožňuje písať a spúšťať kód interaktívne."
                    },
                    {
                        "type": "text",
                        "content": "Po otvorení súboru `.ipynb` v Jupyter Lab skontrolujte, či je vybraný správny kernel. Kernel definuje prostredie, v ktorom sa bude váš kód spúšťať. Pre Python kód vyberte `Python 3`."
                    },
                    {
                        "type": "title",
                        "content": "Základné ovládanie"
                    },
                    {
                        "type": "text",
                        "content": "V tomto cvičení sa naučíte, ako používať knižnicu `Rosmaster_Lib` na základné ovládanie Rosmastera R2. Toto zahŕňa čítanie základných informácií a ovládanie bzučiaka."
                    },
                    {
                        "type": "subtitle",
                        "content": "Importovanie knižnice a vytvorenie objektu"
                    },
                    {
                        "type": "code",
                        "content": "from Rosmaster_Lib import Rosmaster\n\n# Vytvorenie objektu Rosmaster na ovládanie robota\nbot = Rosmaster()"
                    },
                    {
                        "type": "text",
                        "content": "Knižnica `Rosmaster_Lib` poskytuje všetky potrebné funkcie na ovládanie robota. Vytvorením objektu `bot` inicializujete komunikáciu s Rosmasterom."
                    },
                    {
                        "type": "subtitle",
                        "content": "Zobrazenie dostupných metód"
                    },
                    {
                        "type": "code",
                        "content": "help(bot)"
                    },
                    {
                        "type": "text",
                        "content": "Funkcia `help(bot)` zobrazí všetky dostupné metódy objektu `bot` spolu s poznámkami. Pomocou tejto funkcie si môžete rýchlo pozrieť dostupné príkazy na ovládanie Rosmastera."
                    },
                    {
                        "type": "subtitle",
                        "content": "Spustenie prijímania údajov"
                    },
                    {
                        "type": "code",
                        "content": "bot.create_receive_threading()"
                    },
                    {
                        "type": "text",
                        "content": "Táto funkcia spustí prijímanie údajov z Rosmastera. Musí byť zavolaná pred použitím funkcií na čítanie údajov, aby bol zaistený príjem dát."
                    },
                    {
                        "type": "subtitle",
                        "content": "Čítanie základných údajov"
                    },
                    {
                        "type": "code",
                        "content": "# Čítanie verzie firmvéru\nversion = bot.get_version()\nprint(version)\n\n# Čítanie napätia batérie\nvoltage = bot.get_battery_voltage()\nprint(voltage)"
                    },
                    {
                        "type": "text",
                        "content": "Funkcia `get_version()` vráti verziu firmvéru Rosmastera. Funkcia `get_battery_voltage()` číta aktuálne napätie batérie a zobrazí ho."
                    },
                    {
                        "type": "subtitle",
                        "content": "Ovládanie bzučiaka"
                    },
                    {
                        "type": "code",
                        "content": "# Zapnutie bzučiaka na 100 ms\nbot.set_beep(100)\n\n# Zapnutie bzučiaka na 300 ms\nbot.set_beep(300)\n\n# Neustále pískanie bzučiaka\nbot.set_beep(1)\n\n# Vypnutie bzučiaka\nbot.set_beep(0)"
                    },
                    {
                        "type": "text",
                        "content": "Funkcia `set_beep(on_time)` ovláda bzučiak:\n- `on_time=0`: vypnutie bzučiaka.\n- `on_time=1`: bzučiak zostáva zapnutý.\n- `on_time>=10`: bzučiak je zapnutý počas špecifikovaného počtu milisekúnd (musí byť násobkom 10)."
                    },
                    {
                        "type": "subtitle",
                        "content": "Uvoľnenie objektu"
                    },
                    {
                        "type": "code",
                        "content": "del bot"
                    },
                    {
                        "type": "text",
                        "content": "Po ukončení programu nezabudnite vymazať objekt `bot`, aby sa zabránilo konfliktom pri ďalšom používaní knižnice."
                    },
                    {
                        "type": "text",
                        "content": "Pre spustenie kódu kliknite na bunku s kódom, ktorú chcete spustiť, a stlačte `Shift + Enter`. Notebook vykoná kód a zobrazí výstup priamo pod bunkou."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Záver"
                    },
                    {
                        "type": "text",
                        "content": "Týmto cvičením ste sa naučili, ako inicializovať Rosmaster, čítať základné informácie, ako je verzia firmvéru a napätie batérie, a ovládať bzučiak. Tieto základy sú dôležité pre ďalšie rozšírené ovládanie robota."
                    }
                ]                                  
            },
            {
                "id": "exercise-3-3",
                "name": "Cvičenie 3.3 - Základné ovládanie RGB a efektov",
                "description": [
                    {
                        "type": "title",
                        "content": "Ovládanie RGB a efektov"
                    },
                    {
                        "type": "text",
                        "content": "V tomto cvičení sa naučíte ovládať RGB svetlá a pridávať rôzne efekty na Rosmastere pomocou knižnice `Rosmaster_Lib` a interaktívnych ovládacích prvkov Jupyter Notebooku."
                    },
                    {
                        "type": "subtitle",
                        "content": "Importovanie knižníc a inicializácia"
                    },
                    {
                        "type": "code",
                        "content": "from Rosmaster_Lib import Rosmaster\nfrom ipywidgets import interact\nimport ipywidgets as widgets\nimport time\nimport random\n\n# Vytvorenie objektu Rosmaster\nbot = Rosmaster()"
                    },
                    {
                        "type": "text",
                        "content": "Importovali sme knižnicu `Rosmaster_Lib` na ovládanie Rosmastera a `ipywidgets` na vytváranie interaktívnych ovládacích prvkov v Jupyter Notebooku. Následne sme vytvorili objekt `bot` na komunikáciu s Rosmasterom."
                    },
                    {
                        "type": "subtitle",
                        "content": "Ovládanie RGB svetiel cez posuvníky"
                    },
                    {
                        "type": "code",
                        "content": "def rgb_control(r, g, b):\n    bot.set_colorful_lamps(0xff, r, g, b)\n\n# Posuvníky na ovládanie farieb RGB\ninteract(rgb_control, \n         r=widgets.IntSlider(min=0, max=255, step=1, value=128, description='Červená'), \n         g=widgets.IntSlider(min=0, max=255, step=1, value=128, description='Zelená'), \n         b=widgets.IntSlider(min=0, max=255, step=1, value=128, description='Modrá'));"
                    },
                    {
                        "type": "text",
                        "content": "Tento kód vytvorí tri posuvníky na ovládanie intenzity červenej, zelenej a modrej farby svetiel. Výber farby sa prejaví okamžite na Rosmastere."
                    },
                    {
                        "type": "subtitle",
                        "content": "Generovanie náhodnej farby a posúvanie efektu"
                    },
                    {
                        "type": "code",
                        "content": "r, g, b = random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)\nprint(f'Generované farby: R={r}, G={g}, B={b}')\n\ndef move_effect(index):\n    bot.set_colorful_lamps(0xff, 0, 0, 0)\n    time.sleep(0.05)\n    bot.set_colorful_lamps(index, r, g, b)\n\n# Posuvník na ovládanie pozície efektu\ninteract(move_effect, index=widgets.IntSlider(min=0, max=14, step=1, value=0, description='Pozícia'));"
                    },
                    {
                        "type": "text",
                        "content": "Tento kód generuje náhodnú farbu a vytvorí posuvník na ovládanie pozície svetla s touto farbou."
                    },
                    {
                        "type": "subtitle",
                        "content": "Ovládanie svetiel cez tlačidlá"
                    },
                    {
                        "type": "code",
                        "content": "def button_click(info):\n    color = info.description\n    print(f'Tlačidlo {color} stlačené!')\n    if color == \"Červená\":\n        bot.set_colorful_lamps(0xff, 255, 0, 0)\n    elif color == \"Zelená\":\n        bot.set_colorful_lamps(0xff, 0, 255, 0)\n    elif color == \"Modrá\":\n        bot.set_colorful_lamps(0xff, 0, 0, 255)\n    elif color == \"Biela\":\n        bot.set_colorful_lamps(0xff, 255, 255, 255)\n    elif color == \"Vypnúť\":\n        bot.set_colorful_lamps(0xff, 0, 0, 0)\n\n# Vytvorenie tlačidiel\nbtn_red = widgets.Button(description=\"Červená\")\nbtn_red.on_click(button_click)\n\nbtn_green = widgets.Button(description=\"Zelená\")\nbtn_green.on_click(button_click)\n\nbtn_blue = widgets.Button(description=\"Modrá\")\nbtn_blue.on_click(button_click)\n\nbtn_white = widgets.Button(description=\"Biela\")\nbtn_white.on_click(button_click)\n\nbtn_off = widgets.Button(description=\"Vypnúť\")\nbtn_off.on_click(button_click)\n\ndisplay(widgets.HBox([btn_red, btn_green, btn_blue]))\ndisplay(widgets.HBox([btn_white, btn_off]))"
                    },
                    {
                        "type": "text",
                        "content": "Pomocou tlačidiel môžete jednoducho zapnúť svetlá s konkrétnou farbou alebo ich vypnúť. Každé tlačidlo spustí funkciu na ovládanie farieb svetiel."
                    },
                    {
                        "type": "subtitle",
                        "content": "Pridanie špeciálnych efektov"
                    },
                    {
                        "type": "code",
                        "content": "def effect_handler(effect):\n    bot.set_colorful_effect(effect, speed=5)\n\n# Dropdown menu na výber efektu\neffect_dropdown = widgets.Dropdown(\n    options=[\"Vypnúť\", \"Prechádzajúce svetlá\", \"Pulzujúce svetlá\", \"Plynulý prechod\"],\n    description='Efekt',\n    value=\"Vypnúť\")\n\neffect_dropdown.observe(lambda change: effect_handler(effect_dropdown.options.index(change.new)), names='value')\n\ndisplay(effect_dropdown)"
                    },
                    {
                        "type": "text",
                        "content": "Tento kód vytvorí rozbaľovaciu ponuku, kde môžete vybrať špeciálne efekty, ako sú prechádzajúce alebo pulzujúce svetlá. Každý výber aplikuje efekt na Rosmaster."
                    },
                    {
                        "type": "subtitle",
                        "content": "Vyčistenie zdrojov"
                    },
                    {
                        "type": "code",
                        "content": "del bot"
                    },
                    {
                        "type": "text",
                        "content": "Po dokončení programu nezabudnite vymazať objekt `bot`, aby ste predišli konfliktom v ďalšom programe."
                    }
                ]                
            },
            {
                "id": "exercise-3-4",
                "name": "Cvičenie 3.4 - Ovládanie motorov",
                "description": [
                    {
                        "type": "title",
                        "content": "Ovládanie motorov M2 a M4"
                    },
                    {
                        "type": "text",
                        "content": "V tomto cvičení sa naučíte ovládať dva motory Rosmastera (M2 a M4) pomocou posuvníkov v Jupyter Notebooku."
                    },
                    {
                        "type": "subtitle",
                        "content": "Importovanie knižníc a inicializácia"
                    },
                    {
                        "type": "code",
                        "content": "from Rosmaster_Lib import Rosmaster\nfrom ipywidgets import interact\nimport ipywidgets as widgets\nimport time\n\n# Vytvorenie objektu Rosmaster\nbot = Rosmaster()"
                    },
                    {
                        "type": "text",
                        "content": "Najprv sme importovali potrebné knižnice vrátane `Rosmaster_Lib` na ovládanie Rosmastera a `ipywidgets` na vytváranie interaktívnych ovládacích prvkov. Potom sme inicializovali objekt `bot` na komunikáciu s Rosmasterom."
                    },
                    {
                        "type": "subtitle",
                        "content": "Ovládanie motorov pomocou posuvníkov"
                    },
                    {
                        "type": "code",
                        "content": "def run_motor(M2, M4):\n    bot.set_motor(0, M2, 0, M4)\n    return M2, M4\n\n# Vytvorenie posuvníkov na ovládanie motorov\ninteract(run_motor, \n         M2=widgets.IntSlider(min=-100, max=100, step=1, value=0, description='Motor M2'), \n         M4=widgets.IntSlider(min=-100, max=100, step=1, value=0, description='Motor M4'));"
                    },
                    {
                        "type": "text",
                        "content": "Tento kód vytvára dva posuvníky, ktoré umožňujú nastaviť rýchlosť motorov M2 a M4 v rozsahu od -100 do 100. Posuvníky okamžite aplikujú nastavené hodnoty na motory."
                    },
                    {
                        "type": "subtitle",
                        "content": "Zastavenie motorov"
                    },
                    {
                        "type": "code",
                        "content": "bot.set_motor(0, 0, 0, 0)"
                    },
                    {
                        "type": "text",
                        "content": "Použitím tejto funkcie môžete zastaviť všetky motory nastavením ich rýchlosti na 0."
                    },
                    {
                        "type": "subtitle",
                        "content": "Vyčistenie zdrojov"
                    },
                    {
                        "type": "code",
                        "content": "del bot"
                    },
                    {
                        "type": "text",
                        "content": "Po ukončení programu nezabudnite vymazať objekt `bot`, aby ste predišli konfliktom v ďalšom programe."
                    }
                ]             
            },
            {
                "id": "exercise-3-5",
                "name": "Cvičenie 3.5 - Základná kontrola pohybu robota",
                "description": [
                    {
                        "type": "text",
                        "content": "V tomto cvičení sa naučíme ovládať pohyb robota, monitorovať jeho rýchlosti, nastavovať PID parametre a resetovať jeho nastavenia na továrenské hodnoty. Cieľom je získať základné skúsenosti s riadením a konfiguráciou robota pomocou Jupyter Notebooku."
                    },
                    {
                        "type": "bullet",
                        "item": "Ovládanie pohybu robota",
                        "description": "Použijeme interaktívne posuvníky na nastavenie lineárnych rýchlostí (V_x, V_y) a uhlovej rýchlosti (V_z), čo umožní pohyb robota v rôznych smeroch s nastaviteľnou rýchlosťou."
                    },
                    {
                        "type": "bullet",
                        "item": "Získavanie údajov o pohybe",
                        "description": "Program nám umožní čítať a zobrazovať aktuálne údaje o pohybe robota, vrátane jeho lineárnych a uhlových rýchlostí, čo je užitočné pre monitorovanie v reálnom čase."
                    },
                    {
                        "type": "bullet",
                        "item": "Nastavenie PID parametrov",
                        "description": "Používateľ bude mať možnosť upraviť PID parametre pre pohyb robota, čím optimalizuje jeho odozvu a presnosť pohybov."
                    },
                    {
                        "type": "bullet",
                        "item": "Reset na továrenské nastavenia",
                        "description": "Na záver bude predstavená funkcia resetovania robota na predvolené hodnoty, ktorá je užitočná pri ladení alebo obnove systému."
                    },
                    {
                        "type": "title",
                        "content": "Kódovanie"
                    },
                    {
                        "type": "subtitle",
                        "content": "Import knižníc"
                    },
                    {
                        "type": "code",
                        "content": "#!/usr/bin/env python3\n#coding=utf-8\nimport time\nfrom Rosmaster_Lib import Rosmaster\nfrom ipywidgets import interact\nimport ipywidgets as widgets"
                    },
                    {
                        "type": "text",
                        "content": "Importujeme potrebné knižnice: `Rosmaster_Lib` na ovládanie robota, `ipywidgets` na vytvorenie interaktívnych ovládacích prvkov a `time` na spracovanie oneskorení."
                    },
                    {
                        "type": "subtitle",
                        "content": "Vytvorenie objektu Rosmaster"
                    },
                    {
                        "type": "code",
                        "content": "# Vytvorenie objektu Rosmaster\nbot = Rosmaster()"
                    },
                    {
                        "type": "text",
                        "content": "Vytvoríme objekt `Rosmaster` s názvom `bot`, ktorý umožní prístup k funkciám robota."
                    },
                    {
                        "type": "subtitle",
                        "content": "Spustenie prijímania dát"
                    },
                    {
                        "type": "code",
                        "content": "# Spustenie prijímania dát\nbot.create_receive_threading()"
                    },
                    {
                        "type": "text",
                        "content": "Spustíme prijímanie dát, čo je nevyhnutné na čítanie údajov o pohybe alebo senzoroch z robota."
                    },
                    {
                        "type": "subtitle",
                        "content": "Automatické odosielanie dát"
                    },
                    {
                        "type": "code",
                        "content": "# Povolenie automatického odosielania dát\nenable = True\nbot.set_auto_report_state(enable, forever=False)"
                    },
                    {
                        "type": "text",
                        "content": "Povolíme automatické odosielanie dát. Keď je povolené (`enable=True`), robot odosiela údaje každých 40ms. Parameter `forever` určuje, či je nastavenie trvalé."
                    },
                    {
                        "type": "code",
                        "content": "# Zrušenie automatického odosielania dát\nenable = False\nbot.set_auto_report_state(enable, forever=False)"
                    },
                    {
                        "type": "text",
                        "content": "Zakážeme automatické odosielanie dát, aby robot prestal odosielať údaje kontinuálne."
                    },
                    {
                        "type": "subtitle",
                        "content": "Vymazanie dát z vyrovnávacej pamäte"
                    },
                    {
                        "type": "code",
                        "content": "# Vymazanie údajov z vyrovnávacej pamäte\nbot.clear_auto_report_data()"
                    },
                    {
                        "type": "text",
                        "content": "Vymažeme všetky uložené údaje prijaté z robota počas automatického odosielania."
                    },
                    {
                        "type": "subtitle",
                        "content": "Ovládanie pohybu robota"
                    },
                    {
                        "type": "code",
                        "content": "# Funkcia na ovládanie pohybu robota\ndef car_motion(V_x, V_y, V_z):\n    speed_x = V_x / 10.0\n    speed_y = V_y / 10.0\n    speed_z = V_z / 10.0\n    bot.set_car_motion(speed_x, speed_y, speed_z)\n    return speed_x, speed_y, speed_z\n\ninteract(car_motion, \\\n         V_x=widgets.IntSlider(min=-10, max=10, step=1, value=0), \\\n         V_y=widgets.IntSlider(min=-10, max=10, step=1, value=0), \\\n         V_z=widgets.IntSlider(min=-50, max=50, step=1, value=0));"
                    },
                    {
                        "type": "text",
                        "content": "Definujeme funkciu `car_motion` na ovládanie rýchlosti robota v troch osiach. Hodnoty rýchlostí sú zmenšené delením číslom 10 pre jemnejšie ovládanie."
                    },
                    {
                        "type": "subtitle",
                        "content": "Zastavenie pohybu"
                    },
                    {
                        "type": "code",
                        "content": "# Zastavenie pohybu\nbot.set_car_motion(0, 0, 0)"
                    },
                    {
                        "type": "text",
                        "content": "Zastavíme pohyb robota nastavením všetkých komponentov rýchlosti (`V_x`, `V_y`, `V_z`) na nulu."
                    },
                    {
                        "type": "subtitle",
                        "content": "Získanie údajov o pohybe"
                    },
                    {
                        "type": "code",
                        "content": "# Načítanie údajov o pohybe\ntry:\n    while True:\n        V_x, V_y, V_z = bot.get_motion_data()\n        print(\"Rýchlosť:\", V_x, V_y, V_z)\n        bot.clear_auto_report_data()\n        time.sleep(.1)\nexcept KeyboardInterrupt:\n    pass"
                    },
                    {
                        "type": "text",
                        "content": "Čítame a zobrazujeme údaje o pohybe robota (lineárna a uhlová rýchlosť). Pamäť sa vymaže po každom načítaní a proces sa ukončí po stlačení `Ctrl+C`."
                    },
                    {
                        "type": "subtitle",
                        "content": "Nastavenie PID parametrov"
                    },
                    {
                        "type": "code",
                        "content": "# Nastavenie PID parametrov\nkp = 0.8\nki = 0.06\nkd = 0.5\nbot.set_pid_param(kp, ki, kd, forever=False)"
                    },
                    {
                        "type": "text",
                        "content": "Nastavujeme PID parametre (proporcionálny, integračný a derivačný) na jemné doladenie odozvy robota. Toto nastavenie je voliteľné."
                    },
                    {
                        "type": "subtitle",
                        "content": "Načítanie PID parametrov"
                    },
                    {
                        "type": "code",
                        "content": "# Načítanie PID parametrov\nkp, ki, kd = bot.get_motion_pid()\nprint(\"PID:\", kp, ki, kd)"
                    },
                    {
                        "type": "text",
                        "content": "Získavame a zobrazujeme aktuálne PID parametre na overenie nastavení."
                    },
                    {
                        "type": "subtitle",
                        "content": "Obnovenie výrobných nastavení"
                    },
                    {
                        "type": "code",
                        "content": "# Obnovenie výrobných nastavení\nbot.reset_flash_value()"
                    },
                    {
                        "type": "text",
                        "content": "Resetujeme konfigurácie robota na výrobné nastavenia. Tento krok je užitočný pri riešení problémov alebo reštartovaní konfigurácie."
                    },
                    {
                        "type": "subtitle",
                        "content": "Vymazanie objektu"
                    },
                    {
                        "type": "code",
                        "content": "# Vymazanie objektu bot\n del bot"
                    },
                    {
                        "type": "text",
                        "content": "Vymažeme objekt `bot`, aby sme zabránili konfliktom v ďalších programoch."
                    }
                ]
            }
        ]
    },
    {
        "id": "module-4",
        "name": "Modul 4: Docker",
        "lectures": [
            { 
                "id": "lecture-4-1", 
                "name": "Prednáška 4 - Docker - základný prehľad",
                "description": [
                    {
                        "type": "title",
                        "content": "Čo je Docker?"
                    },
                    {
                        "type": "image",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1736937875/Docker-Logo_zrmj8h.png",
                        "alt": "docker logo"
                    },
                    {
                        "type": "text",
                        "content": "Docker je open-source platforma, ktorá umožňuje vytvárať, nasadzovať a spúšťať aplikácie v ľahkých „kontajneroch“. Kontajnery obsahujú všetky potrebné komponenty (knižnice, závislosti, nastavenia) na to, aby aplikácia mohla fungovať rovnako naprieč rôznymi prostrediami a operačnými systémami."
                    },
                    {
                        "type": "text",
                        "content": "<strong>Jednoduchý príklad:</strong><br> Predstav si, že máš aplikáciu, ktorá beží v tvojom počítači. Potrebuješ ju presunúť na iný počítač alebo server. Bez Dockeru musíš znova nastavovať všetko potrebné (knižnice, verzie, konfigurácie). S Dockerom stačí preniesť jeden „kontajner“ a spustiť ho. Všetko funguje tak, ako u teba."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Prečo Docker?"
                    },
                    {
                        "type": "bullet",
                        "item": "Jednoduchosť",
                        "description": "– Kontajnery sa dajú rýchlo vytvoriť, upraviť či zmazať."
                    },
                    {
                        "type": "bullet",
                        "item": "Prenositeľnosť",
                        "description": "– Aplikácia v Docker kontajneri beží rovnako takmer všade."
                    },
                    {
                        "type": "bullet",
                        "item": "Efektívne využitie zdrojov",
                        "description": "– Oproti virtuálnym strojom (VM) sú Docker kontajnery menej náročné na pamäť a procesor."
                    },
                    {
                        "type": "bullet",
                        "item": "Izolácia",
                        "description": "– Každá aplikácia je uzavretá vo vlastnom kontajneri, čím sa znižuje riziko konfliktov medzi rôznymi aplikáciami alebo ich verziami."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Docker vs. Virtual Machine (VM)"
                    },
                    {
                        "type": "text",
                        "content": "Virtual Machine (VM): Spúšťa celý operačný systém v rámci hostiteľského systému. Má vlastné jadro (kernel), čo znamená vyššiu spotrebu zdrojov (pamäť, procesor)."
                    },
                    {
                        "type": "text",
                        "content": "Docker kontajner: Využíva jadro hostiteľského operačného systému, a preto je omnoho ľahší a štartuje veľmi rýchlo."
                    },
                    {
                        "type": "text",
                        "content": "<strong>Jednoducho povedané:</strong> VM je ako stolný počítač – výkonnejší, ale zaberá viac miesta a je menej prenosný, zatiaľ čo Docker kontajner je ako notebook – ľahký, prenosný a dostatočný na väčšinu úloh."
                    },                    
                    {
                        "type": "table",
                        "columns": ["Aspekt", "Virtual Machine (VM)", "Docker kontajner"],
                        "rows": [
                            {
                                "Aspekt": "Štartovanie",
                                "Virtual Machine (VM)": "Pomalejšie, vyžaduje zavedenie celého operačného systému.",
                                "Docker kontajner": "Rýchlejšie, využíva hostiteľský operačný systém."
                            },
                            {
                                "Aspekt": "Využitie zdrojov",
                                "Virtual Machine (VM)": "Vyššia spotreba pamäte a CPU.",
                                "Docker kontajner": "Nižšia spotreba zdrojov."
                            },
                            {
                                "Aspekt": "Izolácia",
                                "Virtual Machine (VM)": "Úplná izolácia, vlastné jadro (kernel).",
                                "Docker kontajner": "Čiastočná izolácia, zdieľa jadro s hostiteľom."
                            },
                            {
                                "Aspekt": "Prenositeľnosť",
                                "Virtual Machine (VM)": "Prenos závislý na hypervízore.",
                                "Docker kontajner": "Jednoduchý prenos medzi systémami."
                            },
                            {
                                "Aspekt": "Použitie",
                                "Virtual Machine (VM)": "Komplexnejšie aplikácie s rôznymi operačnými systémami.",
                                "Docker kontajner": "Mikroslužby a ľahké aplikácie."
                            }
                        ]
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Základné pojmy"
                    },
                    {
                        "type": "bullet",
                        "item": "Image (Obraz)",
                        "description": "– Je to šablóna (ako „fotka“) s presnou inštaláciou aplikácie a jej závislostí. Obraz je nemenný – keď ho upravíš, vytváraš nový obraz."
                    },
                    {
                        "type": "bullet",
                        "item": "Container (Kontajner)",
                        "description": "– Bežiaca inštancia obrazu. Keď spustíš obraz, dostaneš kontajner."
                    },
                    {
                        "type": "bullet",
                        "item": "Dockerfile",
                        "description": "– Textový súbor, ktorý obsahuje inštrukcie na vytvorenie vlastného Docker obrazu (napr. ako nainštalovať knižnicu, skopírovať súbory a pod.)."
                    },
                    {
                        "type": "bullet",
                        "item": "Docker Hub",
                        "description": "– Verejná online služba, kde môžeš nájsť (pull) alebo zdieľať (push) Docker obrazy."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Inštalácia a spustenie Dockeru"
                    },
                    {
                        "type": "text",
                        "content": "Docker môžete nainštalovať na akýkoľvek operačný systém. Pre podrobné inštrukcie navštívte stránku: <a href='https://docs.docker.com/engine/install/' target='_blank'>Sprievodca inštaláciou Dockeru</a>."
                    },
                    {
                        "type": "text",
                        "content": "Po nainštalovaní Dockeru si môžete overiť jeho funkčnosť jednoduchým príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "docker run hello-world"
                    },
                    {
                        "type": "text",
                        "content": "Tento príkaz vykoná nasledujúce kroky:"
                    },
                    {
                        "type": "bullet",
                        "item": "Stiahnutie obrazu",
                        "description": "– Automaticky stiahne obraz 'hello-world' z Docker Hubu, ak ho ešte nemáte lokálne."
                    },
                    {
                        "type": "bullet",
                        "item": "Vytvorenie a spustenie kontajnera",
                        "description": "– Vytvorí a spustí nový kontajner z obrazu 'hello-world'."
                    },
                    {
                        "type": "bullet",
                        "item": "Zobrazenie správy",
                        "description": "– Vypíše na obrazovku správu od Dockeru, čím potvrdí správnu inštaláciu."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Tvorba vlastného kontajnera"
                    },
                    {
                        "type": "text",
                        "content": "Vlastný kontajner môžeš vytvoriť pomocou súboru Dockerfile, ktorý obsahuje inštrukcie na vytvorenie obrazu. Tento súbor umožňuje špecifikovať závislosti, kopírovať súbory a nastaviť príkazy, ktoré sa spustia pri štarte kontajnera."
                    },
                    {
                        "type": "text",
                        "content": "Pre väčšie projekty s viacerými službami je užitočné použiť Docker Compose. Umožňuje definovať a spúšťať viacero kontajnerov naraz pomocou jedného konfiguračného súboru (docker-compose.yml). Tento súbor obsahuje informácie o službách, portoch a sieťach, ktoré kontajnery používajú."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Základné príkazy"
                    },
                    {
                        "type": "bullet",
                        "item": "Zobrazenie obrazov",
                        "description": "– Pozri si všetky lokálne dostupné obrazy príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "docker images"
                    },
                    {
                        "type": "bullet",
                        "item": "Vymazanie obrazov",
                        "description": "– Nepotrebné obrazy vymaž príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "docker rmi <IMAGE_ID>"
                    },
                    {
                        "type": "bullet",
                        "item": "Zobrazenie bežiacich kontajnerov",
                        "description": "– Zobraz všetky aktívne kontajnery príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "docker ps"
                    },
                    {
                        "type": "bullet",
                        "item": "Zastavenie kontajnera",
                        "description": "– Zastav bežiaci kontajner príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "docker stop <CONTAINER_ID>"
                    },
                    {
                        "type": "bullet",
                        "item": "Vymazanie kontajnera",
                        "description": "– Odstráň zastavený kontajner príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "docker rm <CONTAINER_ID>"
                    },
                    {
                        "type": "bullet",
                        "item": "Zobrazenie logov",
                        "description": "– Pozri si logy bežiaceho kontajnera príkazom:"
                    },
                    {
                        "type": "code",
                        "content": "docker logs <CONTAINER_ID>"
                    },
                    {
                        "type": "bullet",
                        "item": "Prístup do kontajnera",
                        "description": "– Ak chceš získať prístup do bežiaceho kontajnera, použi:"
                    },
                    {
                        "type": "code",
                        "content": "docker exec -it <CONTAINER_ID> bash"
                    },
                    {
                        "type": "bullet",
                        "item": "Presmerovanie portov",
                        "description": "– Presmeruj porty kontajnera na svoj lokálny systém príkazom (napr. 8080 na 80):"
                    },
                    {
                        "type": "code",
                        "content": "docker run -p 8080:80 <IMAGE_NAME>"
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Zhrnutie"
                    },
                    {
                        "type": "text",
                        "content": "Docker je výkonný nástroj na vytváranie a správu kontajnerov. Umožňuje efektívne vyvíjať, testovať a nasadzovať aplikácie. Vďaka jeho prenosnosti a škálovateľnosti sa stal nevyhnutnou súčasťou moderného softvérového vývoja."
                    }
                ]
            }
        ],
        "exercises": [
            { 
                "id": "exercise-4-1", 
                "name": "Cvičenie 4.1 - Použitie Dockeru na správu hardvéru a prenos dát",
                "description": [
                    {
                        "type": "title",
                        "content": "Interakcia Dockeru s hardvérom a prenos dát"
                    },
                    {
                        "type": "text",
                        "content": "Docker je využívaný na správu a nasadenie softvéru na robotických systémoch, ako je ROSMASTER R2, ktorý obsahuje hardvérové komponenty ako AstraPro Plus kameru a Silan A1 lidar. Tieto zariadenia môžu byť pripojené do kontajnerov na spracovanie dát a navigáciu robota."
                    },
                    {
                        "type": "subtitle",
                        "content": "Hardvérové pripojenie (port binding)"
                    },
                    {
                        "type": "text",
                        "content": "Na umožnenie prístupu k hardvéru (napr. kamera, lidar) z kontajnera je potrebné nastaviť pravidlá udev na hostiteľskom systéme a následne pripojiť zariadenia pomocou parametra --device."
                    },
                    {
                        "type": "code",
                        "content": "docker run -it --device=/dev/myserial --device=/dev/rplidar ubuntu:latest /bin/bash"
                    },
                    {
                        "type": "text",
                        "content": "Týmto spôsobom budú zariadenia, ako 'myserial' a 'rplidar', dostupné na používanie v Docker kontejnere."
                    },
                    {
                        "type": "subtitle",
                        "content": "Zobrazenie GUI v Docker kontejnere"
                    },
                    {
                        "type": "text",
                        "content": "Pri práci s robotickými systémami je často potrebné vizualizovať dáta (napr. lidarové skeny alebo 3D mapovanie). Pomocou nástrojov ako xhost + môžete zobrazovať GUI aplikácie spustené v kontajneri na hostiteľskom systéme."
                    },
                    {
                        "type": "code",
                        "content": "docker run -it --env=\"DISPLAY\" --env=\"QT_X11_NO_MITSHM=1\" -v /tmp/.X11-unix:/tmp/.X11-unix <image_name> /bin/bash"
                    },
                    {
                        "type": "text",
                        "content": "Takto spustené GUI aplikácie (napríklad rviz2) umožňujú vizualizáciu robotických operácií priamo z kontajnera."
                    },
                    {
                        "type": "subtitle",
                        "content": "Prenos súborov medzi hostiteľom a kontajnerom"
                    },
                    {
                        "type": "bullet",
                        "item": "Kopírovanie súborov z kontajnera na hostiteľa",
                        "description": "– Použite príkaz docker cp na presun súborov z kontajnera do hostiteľského systému:"
                    },
                    {
                        "type": "code",
                        "content": "docker cp <container_id>:/path/in/container /path/on/host"
                    },
                    {
                        "type": "bullet",
                        "item": "Kopírovanie súborov z hostiteľa do kontajnera",
                        "description": "– Použite príkaz docker cp na presun súborov z hostiteľského systému do kontajnera:"
                    },
                    {
                        "type": "code",
                        "content": "docker cp /path/on/host <container_id>:/path/in/container"
                    },
                    {
                        "type": "text",
                        "content": "Tieto príkazy umožňujú výmenu konfigurácií, logov alebo iných dôležitých dát medzi hostiteľským systémom a kontajnerom."
                    }                    
                ]
            },
            { 
                "id": "exercise-4-2", 
                "name": "Cvičenie 4.2 - Práca s hardvérom a spúšťanie Docker kontajnera",
                "description": [
                    {
                        "type": "title",
                        "content": "Kontrola pripojených zariadení"
                    },
                    {
                        "type": "text",
                        "content": "Pomocou príkazov si môžeme prezrieť pripojené zariadenia a určiť, ktoré hardvérové komponenty sú dostupné pre použitie v systéme."
                    },
                    {
                        "type": "bullet",
                        "item": "Zobrazenie pravidiel udev",
                        "description": "– Použite príkaz na zobrazenie konfigurácie pripojených zariadení:"
                    },
                    {
                        "type": "code",
                        "content": "ll /etc/udev/rules.d"
                    },
                    {
                        "type": "bullet",
                        "item": "Zobrazenie pripojených sériových zariadení",
                        "description": "– Použite príkaz na identifikáciu zariadení typu ttyUSB:"
                    },
                    {
                        "type": "code",
                        "content": "ll /dev | grep ttyUSB*"
                    },
                    {
                        "type": "bullet",
                        "item": "Zobrazenie Astra kamery",
                        "description": "– Overte, či je Astra kamera pripojená pomocou príkazu:"
                    },
                    {
                        "type": "code",
                        "content": "ll /dev/astra*"
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Analýza súboru run_docker.sh"
                    },
                    {
                        "type": "code",
                        "content": "cat run_docker.sh"
                    },
                    {
                        "type": "code",
                        "content": "#!/bin/bash\nxhost +\n\ndocker run -it \\\n--net=host \\\n--env=\"DISPLAY\" \\\n--env=\"QT_X11_NO_MITSHM=1\" \\\n-v /tmp/.X11-unix:/tmp/.X11-unix \\\n-v /home/jetson/temp:/root/yahboomcar_ros2_ws/temp \\\n-v /home/jetson/rosboard:/root/rosboard \\\n-v /home/jetson/maps:/root/maps \\\n-v /dev/bus/usb/001/010:/dev/bus/usb/001/010 \\\n-v /dev/bus/usb/001/012:/dev/bus/usb/001/012 \\\n--device=/dev/astradepth \\\n--device=/dev/astrauvc \\\n--device=/dev/video0 \\\n--device=/dev/myserial \\\n--device=/dev/rplidar \\\n--device=/dev/input \\\n-p 9090:9090 \\\n-p 8888:8888 \\\nyahboomtechnology/ros-foxy:4.0.5 /bin/bash"
                    },                    
                    {
                        "type": "text",
                        "content": "Súbor `run_docker.sh` je skript, ktorý umožňuje spustiť Docker kontajner s rôznymi nastaveniami a pripojenými zariadeniami. Obsahuje tieto kľúčové časti:"
                    },
                    {
                        "type": "bullet",
                        "item": "Pripojenie ku GUI",
                        "description": "– Použitím príkazu `xhost +` sa umožní prístup ku grafickému prostrediu hostiteľa pre aplikácie bežiace v kontajneri."
                    },
                    {
                        "type": "bullet",
                        "item": "Sieťové nastavenia",
                        "description": "– Parameter `--net=host` zdieľa sieťové rozhranie hostiteľského systému s kontajnerom."
                    },
                    {
                        "type": "bullet",
                        "item": "Pripojenie zariadení",
                        "description": "– Parametre `--device` umožňujú pripojenie hardvérových zariadení (napr. kamera Astra alebo lidar RPLIDAR) priamo do kontajnera."
                    },
                    {
                        "type": "bullet",
                        "item": "Zdieľanie súborov",
                        "description": "– Príkazy `-v` mapujú priečinky medzi hostiteľským systémom a kontajnerom, čo umožňuje zdieľanie dát."
                    },
                    {
                        "type": "bullet",
                        "item": "Spustenie kontajnera",
                        "description": "– Kontajner sa spustí s obrazom `yahboomtechnology/ros-foxy:4.0.5` a interaktívnou Bash konzolou."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Spustenie skriptu run_docker.sh"
                    },
                    {
                        "type": "text",
                        "content": "Na spustenie Docker kontajnera použite príkaz:"
                    },
                    {
                        "type": "code",
                        "content": "./run_docker.sh"
                    },
                    {
                        "type": "text",
                        "content": "Po spustení skriptu sa Docker kontajner pripojí k hostiteľskému systému, pričom bude mať prístup k zdieľaným zariadeniam (napr. Astra kamera a lidar) a dátam. Kontajner je pripravený na spustenie aplikácií, ako je napríklad RViz2. RViz2 je grafický nástroj na vizualizáciu dát, ako sú lidarové skeny alebo mapy robota. Na spustenie RViz2 je potrebné pripojenie cez VNC. RViz2 bude detailne vysvetlený v neskoršej časti kurzu."
                    }                                 
                ]
            }
        ]
    },
    {
        "id": "module-5",
        "name": "Modul 5: ROS",
        "lectures": [
            { 
                "id": "lecture-5-1", 
                "name": "Prednáška 5.1 - ROS 1",
                "description": [
                    {
                        "type": "title",
                        "content": "Čo je ROS"
                    },
                    {
                        "type": "text",
                        "content": "ROS (Robot Operating System) je open source systém vyvinutý špeciálne pre robotické aplikácie. Zahŕňa:"
                    },
                    {
                        "type": "bullet",
                        "item": "Hardvérovú abstrakciu",
                        "description": "– Jednotné rozhranie k rôznym senzorom a aktuátorom."
                    },
                    {
                        "type": "bullet",
                        "item": "Nástroje na správu a prenos dát medzi procesmi (uzlami)",
                        "description": "– Umožňuje komunikáciu medzi rôznymi časťami robotického systému."
                    },
                    {
                        "type": "bullet",
                        "item": "Systém na publikovanie a zdieľanie softvérových balíkov",
                        "description": "– Uľahčuje distribúciu a opätovné využitie softvéru."
                    },
                    {
                        "type": "bullet",
                        "item": "Možnosť distribuovaného vývoja",
                        "description": "– Viaceré uzly môžu bežať na viacerých počítačoch v sieti."
                    },
                    {
                        "type": "text",
                        "content": "Hlavným cieľom ROS je podporiť znovupoužiteľnosť kódu vo výskume a pri vývoji robotických riešení, zrýchliť prototypovanie a uľahčiť zdieľanie riešení naprieč komunitou."
                    },
                    {
                        "type": "text",
                        "content": "Odporúčaný odkaz: <a href='https://www.ros.org/' target='_blank'>ROS Wiki</a> – Oficiálna dokumentácia a komunitné zdroje."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Hlavné vlastnosti ROS"
                    },
                    {
                        "type": "bullet",
                        "item": "Distribuovaná architektúra",
                        "description": "– Každý spustený proces sa v ROS nazýva „uzol“ (node). Uzly sú spravované centrálnym procesom nazývaným Master (resp. Node Manager), ktorý zabezpečuje registráciu a vyhľadávanie tém, služieb či akcií."
                    },
                    {
                        "type": "bullet",
                        "item": "Podpora viacerých jazykov",
                        "description": "– ROS poskytuje oficiálne knižnice pre C++ (roscpp) a Python (rospy). Existujú však aj neoficiálne väzby pre ďalšie jazyky (napr. Java)."
                    },
                    {
                        "type": "bullet",
                        "item": "Modularita a škálovateľnosť",
                        "description": "– Je možné spúšťať len jeden uzol, ale aj prepojiť desiatky či stovky uzlov do väčšieho projektu (spravované často cez konfiguračné súbory launch)."
                    },
                    {
                        "type": "bullet",
                        "item": "Otvorenosť a voľné použitie",
                        "description": "– ROS má licenciu BSD, čo umožňuje voľné použitie a úpravy – či už na akademické účely, alebo v komerčnom prostredí."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Celková architektúra ROS"
                    },
                    {
                        "type": "bullet",
                        "item": "Úroveň výpočtového grafu (Computation Graph Level)",
                        "description": "– Zodpovedá behu uzlov (nodes) a ich komunikácii prostredníctvom tém (topics), služieb (services) a akcií (actions)."
                    },
                    {
                        "type": "bullet",
                        "item": "Úroveň systému súborov (File System Level)",
                        "description": "– Popisuje, kde a ako sú uložené kódy, spustiteľné súbory, definície správ (messages), služby (srv) alebo akcie (action) na pevnom disku. Tieto sú organizované do balíkov (packages) a metabalíkov (metapackages)."
                    },
                    {
                        "type": "bullet",
                        "item": "Úroveň open source komunity (Open Source Community Level)",
                        "description": "– Zahŕňa zdielanie kódu, balíkov, algoritmov a znalostí prostredníctvom oficiálnych distribúcií, repozitárov, wiki, mailing listov či fóra."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Úroveň výpočtového grafu"
                    },
                    {
                        "type": "bullet",
                        "item": "Uzly (Nodes)",
                        "description": "– Každý uzol je jeden samostatný proces vykonávajúci určitú funkciu (napríklad čítanie dát zo senzora, plánovanie dráhy, ovládanie robota a pod.). Množstvo menších a špecializovaných uzlov zvyšuje flexibilitu a modularitu."
                    },
                    {
                        "type": "bullet",
                        "item": "Správy (Messages)",
                        "description": "– Definujú formáty dát, ktoré sa prenášajú medzi uzlami. Ak napr. čítate údaje o polohe z enkodéra motora, zadefinujete si správu (message), ktorá obsahuje požadované premenné (pozícia, rýchlosť atď.)."
                    },
                    {
                        "type": "bullet",
                        "item": "Témy (Topics)",
                        "description": "– Mechanizmus publish/subscribe. Uzol, ktorý dáta generuje (napr. senzor), ich publikuje (publish) na určitú tému. Iný uzol, ktorý potrebuje tieto dáta, danú tému odoberá (subscribe). Týmto spôsobom dochádza k asynchrónnemu prenosu dát."
                    },
                    {
                        "type": "bullet",
                        "item": "Služby (Services)",
                        "description": "– Používajú sa v modeli požiadavka-odpoveď (request-reply). Klient (client) pošle požiadavku na server (server) a čaká na odpoveď. Je to vhodné, ak potrebujeme ihneď výsledok a ide o krátkodobú operáciu."
                    },
                    {
                        "type": "bullet",
                        "item": "Akcie (Actions)",
                        "description": "– Slúžia na úlohy, ktoré môžu trvať dlhší čas, pričom klient (action client) dostáva priebežný feedback a môže akciu kedykoľvek zrušiť (cancel). Akcie sú nadstavbou nad témami a službami."
                    },
                    {
                        "type": "bullet",
                        "item": "Node Manager (Master)",
                        "description": "– Zabezpečuje registráciu a vyhľadávanie názvov tém, služieb a akcií. Ak Master nebeží, uzly sa navzájom „nenájdu“."
                    },
                    {
                        "type": "bullet",
                        "item": "Parameter Server",
                        "description": "– Umožňuje vkladať a čítať konfiguračné parametre v rámci ROS systému (napr. kalibrácia senzora)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Úroveň systému súborov"
                    },
                    {
                        "type": "bullet",
                        "item": "Balík (Package)",
                        "description": "– Základná jednotka softvérovej organizácie v ROS. Obsahuje zdrojové kódy, spustiteľné súbory, súbory s definíciami správ, služby alebo akcie. Súbor `package.xml` opisuje závislosti balíka, licenciu a pod."
                    },
                    {
                        "type": "bullet",
                        "item": "Komplexnejší (metabalík) alebo komplexná funkčná skupina",
                        "description": "– Viac balíkov môže byť združených do tzv. metabalíkov alebo väčších funkčných celkov, ktoré spolu tvoria napríklad kompletné riešenie pre navigáciu."
                    },
                    {
                        "type": "bullet",
                        "item": "Súbory s definíciami",
                        "description": "– Obsahujú špecifikácie potrebné na komunikáciu v rámci ROS systému:\n  - `msg/` – správy (Messages)\n  - `srv/` – služby (Services)\n  - `action/` – akcie (Actions)"
                    },
                    {
                        "type": "bullet",
                        "item": "Ostatné súbory",
                        "description": "– Konfigurácie, zdrojové kódy, knižnice, skripty."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Úroveň open source komunity"
                    },
                    {
                        "type": "bullet",
                        "item": "Distribúcie ROS (Releases)",
                        "description": "– ROS funguje na princípe distribúcií (napr. Melodic, Noetic). Každá distribúcia má podporu pre konkrétne verzie Ubuntu a má určenú dobu životnosti. Príklad: ROS Noetic Ninjemys (máj 2020) beží na Ubuntu 20.04 a je oficiálne podporovaný do mája 2023."
                    },
                    {
                        "type": "bullet",
                        "item": "Repozitáre kódu",
                        "description": "– V komunitnom ekosystéme ROS existuje obrovské množstvo repozitárov, v ktorých sa dajú nájsť balíky pre rôzne roboty, senzory a algoritmy."
                    },
                    {
                        "type": "bullet",
                        "item": "ROS Wiki",
                        "description": "– Hlavné miesto s dokumentáciou, návodmi a tutoriálmi. Každý sa môže zapojiť a pridať nové články či opravy."
                    },
                    {
                        "type": "bullet",
                        "item": "ROS Answers",
                        "description": "– Fórum pre otázky a odpovede, ktoré riešia konkrétne problémy s ROS."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Komunikačný mechanizmus"
                    },
                    {
                        "type": "subtitle",
                        "content": "Topic (Téma)"
                    },
                    {
                        "type": "text",
                        "content": "Asynchrónny publish-subscribe model. Publikovanie (publish) a odoberanie (subscribe) prebieha pomocou názvov tém, pričom sa očakáva súlad v type správy (napr. geometry_msgs/Twist)."
                    },
                    {
                        "type": "text",
                        "content": "Ideálne na kontinuálne a jednosmerné dátové toky (napr. údaje zo senzora LIDAR, kamerové dáta, informácie o polohe)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Service (Služba)"
                    },
                    {
                        "type": "text",
                        "content": "Služba = server + klient, kde klient pošle požiadavku (request) a server odpovie (response)."
                    },
                    {
                        "type": "text",
                        "content": "Vhodné, keď potrebujeme okamžitý výsledok a operácia netrvá dlho (napr. zistiť stav batérie, prepnúť mód zariadenia)."
                    },
                    {
                        "type": "text",
                        "content": "Je to synchrónny mechanizmus – klient čaká, kým server neodpovie."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Action (Akcia)"
                    },
                    {
                        "type": "text",
                        "content": "Akcia = asynchrónny klient–server mechanizmus s neustálym odovzdávaním spätnej väzby (feedback) a možnosťou zrušiť úlohu počas behu."
                    },
                    {
                        "type": "text",
                        "content": "Akcia pracuje cez viacero tém (goal, feedback, result, status, cancel) a dokáže riešiť dlhšie bežiace operácie (napr. presun robota na určenú súradnicu)."
                    },
                    {
                        "type": "bullet",
                        "item": "Goal (cieľ)",
                        "description": "– Klient vyšle cieľ a chce ho dosiahnuť (napr. navigovať robota do určitej pozície)."
                    },
                    {
                        "type": "bullet",
                        "item": "Feedback",
                        "description": "– Server posiela priebežné informácie o stave úlohy (napr. percento dokončenia, aktuálnu pozíciu)."
                    },
                    {
                        "type": "bullet",
                        "item": "Result (výsledok)",
                        "description": "– Po úspešnom (alebo neúspešnom) dokončení sa klient dozvie konečný stav."
                    },
                    {
                        "type": "bullet",
                        "item": "Cancel (zrušenie)",
                        "description": "– Kedykoľvek možno akciu zastaviť (napr. ak úloha už nie je potrebná)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Porovnanie komunikačných mechanizmov"
                    },                    
                    {
                        "type": "table",
                        "columns": ["Vlastnosť", "Topic", "Service", "Action"],
                        "rows": [
                            {
                                "Vlastnosť": "Mechanizmus",
                                "Topic": "Publish/Subscribe",
                                "Service": "Request/Response",
                                "Action": "Asynchrónny Client/Server"
                            },
                            {
                                "Vlastnosť": "Odozva",
                                "Topic": "Žiadna",
                                "Service": "Ihneď – jednorazová",
                                "Action": "Priebežný feedback + konečný výsledok"
                            },
                            {
                                "Vlastnosť": "Zrušenie",
                                "Topic": "Nie",
                                "Service": "Nie",
                                "Action": "Áno (Cancel)"
                            },
                            {
                                "Vlastnosť": "Vhodné",
                                "Topic": "Kontinuálne dáta",
                                "Service": "Krátke dotazy/operácie",
                                "Action": "Dlhšie trvajúce úlohy, navigácia atď."
                            }
                        ]
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Bežné súčasti (Common Components)"
                    },
                    {
                        "type": "bullet",
                        "item": "launch (spúšťací súbor)",
                        "description": "– Umožňuje naraz spúšťať a konfigurovať viaceré uzly. Môže automaticky štartovať roscore (Master), nastavovať parametre a spúšťať uzly."
                    },
                    {
                        "type": "bullet",
                        "item": "TF (transformácie súradníc)",
                        "description": "– Rieši sledovanie a prepočty medzi rôznymi súradnicovými systémami (napr. základňa robota, rameno, kamera atď.) v čase. Pomocou TF môžeme získať transformácie (napr. posun, rotáciu) medzi jednotlivými časťami robota."
                    },
                    {
                        "type": "bullet",
                        "item": "Rviz",
                        "description": "– 3D vizualizačný nástroj na zobrazovanie robotických dát (mapy, senzory, 3D model robota). Umožňuje interaktívne overovanie dát, napr. pohyb robota, dráhy, obrysy z LIDAR-u atď."
                    },
                    {
                        "type": "bullet",
                        "item": "Gazebo",
                        "description": "– Výkonný 3D fyzikálny simulátor robotov, ktorý dokáže simulovať dynamiku, trenie či senzory. Umožňuje testovať robotické scenáre bez fyzického hardvéru."
                    },
                    {
                        "type": "bullet",
                        "item": "rqt (Qt toolbox)",
                        "description": "– Sada grafických nástrojov (napr. rqt_graph na zobrazenie grafu uzlov a tém, rqt_plot na vykreslenie dát v reálnom čase, rqt_console na prezeranie logov)."
                    },
                    {
                        "type": "bullet",
                        "item": "Navigation",
                        "description": "– Sústava balíkov, ktoré umožňujú 2D navigáciu robotov (plánovanie dráhy, vyhýbanie sa prekážkam, mapovanie)."
                    },
                    {
                        "type": "bullet",
                        "item": "MoveIt!",
                        "description": "– Najčastejšie používaný balík pre manipulátory (robotické ramená). Zahŕňa plánovanie dráhy, inverznú kinematiku, kolízne testy, atď."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Zhrnutie"
                    },
                    {
                        "type": "text",
                        "content": "ROS je robustný a flexibilný systém, ktorý umožňuje efektívnu správu robotických aplikácií. S jeho distribúciami, nástrojmi ako Rviz a Gazebo, a s možnosťou jednoduchej integrácie hardvéru, sa stal neoddeliteľnou súčasťou vývoja moderných robotických systémov."
                    },
                    {
                        "type": "text",
                        "content": "Aj keď ROS poskytuje množstvo výhod, jeho vývoj pokračuje. V ďalšej prednáške sa zameriame na ROS 2, novšiu verziu systému, ktorá prináša pokročilé funkcie, vyššiu bezpečnosť a výkon pre náročnejšie aplikácie."
                    }                                                                                                            
                ]
            },
            { 
                "id": "lecture-5-2", 
                "name": "Prednáška 5.2 - ROS 2",
                "description": [
                    {
                        "type": "title",
                        "content": "Úvod do ROS 2"
                    },
                    {
                        "type": "text",
                        "content": "ROS 2 je druhá generácia Robot Operating System, ktorá nadväzuje na úspechy a ponaučenia z ROS 1 (často volaného aj \"ROS\"). Zameriava sa na riešenie obmedzení, ktoré sa v priebehu vývoja ROS 1 ukázali ako kľúčové, najmä:"
                    },
                    {
                        "type": "bullet",
                        "item": "Podpora viacerých platforiem",
                        "description": "– Umožňuje spúšťať ROS 2 nielen na Linuxe, ale aj na Windows a macOS."
                    },
                    {
                        "type": "bullet",
                        "item": "Distribuovaná architektúra",
                        "description": "– Nevyžaduje centrálneho uzla Master, čím zvyšuje flexibilitu a odolnosť systému."
                    },
                    {
                        "type": "bullet",
                        "item": "Zlepšená podpora reálneho času",
                        "description": "– Poskytuje lepšiu spoľahlivosť komunikácie a umožňuje prevádzku v reálnom čase."
                    },
                    {
                        "type": "bullet",
                        "item": "Nové komunikačné protokoly",
                        "description": "– Využíva DDS (Data Distribution Service), ktorý umožňuje Quality of Service (QoS) politiky na riadenie komunikácie."
                    },
                    {
                        "type": "text",
                        "content": "Prvá oficiálna verzia ROS 2 (Ardent Apalone) vyšla v roku 2017. Momentálne existuje niekoľko stabilných distribúcií, napr. Foxy Fitzroy (pre Ubuntu 20.04), Galactic Geochelone (tiež pre Ubuntu 20.04) a Humble Hawksbill (pre Ubuntu 22.04)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Prehľad hlavných vlastností ROS 2"
                    },
                    {
                        "type": "subtitle",
                        "content": "Podpora viacerých operačných systémov"
                    },
                    {
                        "type": "bullet",
                        "item": "Linux",
                        "description": "– Najčastejšie Ubuntu."
                    },
                    {
                        "type": "bullet",
                        "item": "Windows 10",
                        "description": "– Alternatíva pre prostredia vyžadujúce Windows."
                    },
                    {
                        "type": "bullet",
                        "item": "macOS",
                        "description": "– Menej častá, ale podporovaná platforma."
                    },
                    {
                        "type": "text",
                        "content": "Vďaka tomu je ROS 2 vhodný aj do prostredí, kde ROS 1 nebolo možné ľahko nasadiť."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Distribuovaná architektúra (bez Mastera)"
                    },
                    {
                        "type": "text",
                        "content": "V ROS 2 už nie je centrálna entita Master ako v ROS 1. Uzly si vzájomne objavujú (discovery) dostupné témy a služby pomocou DDS (Data Distribution Service). To umožňuje lepšiu škálovateľnosť a robustnejšiu komunikáciu, kde zlyhanie jedného uzla nespôsobí kolaps celého systému."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Reálne-časové použitie (Real-Time) a QoS"
                    },
                    {
                        "type": "text",
                        "content": "DDS umožňuje definovať tzv. Quality of Service (QoS) profily, ktoré pomáhajú zabezpečiť:"
                    },
                    {
                        "type": "bullet",
                        "item": "Spoľahlivú komunikáciu",
                        "description": "– Reliable/unreliable podľa potrieb."
                    },
                    {
                        "type": "bullet",
                        "item": "Nastavenie latencie a priority správ",
                        "description": "– Umožňuje flexibilitu v závislosti od scenára."
                    },
                    {
                        "type": "bullet",
                        "item": "Možnosti latchingu",
                        "description": "– Zachovanie poslednej správy pre nových odoberateľov."
                    },
                    {
                        "type": "text",
                        "content": "Táto flexibilita je potrebná napr. v priemysle, kde robotické systémy vyžadujú deterministické spracovanie."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Novšie verzie programovacích jazykov"
                    },
                    {
                        "type": "bullet",
                        "item": "C++11 alebo novšie",
                        "description": "– ROS 1 využíva zväčša C++03."
                    },
                    {
                        "type": "bullet",
                        "item": "Python 3.5+",
                        "description": "– ROS 1 bol typicky viazaný na Python 2."
                    },
                    {
                        "type": "text",
                        "content": "Tým vzniká lepšia podpora moderných jazykových funkcií a knižníc."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Nový build systém: ament"
                    },
                    {
                        "type": "text",
                        "content": "ROS 1 používa catkin, zatiaľ čo ROS 2 prešlo na ament ako základ pre tvorbu balíkov. Pri väčších projektoch sa však využíva nástroj colcon (napr. colcon build), ktorý integruje ament (aj ďalšie build systémy) a poskytuje jednotnú prácu s balíkmi."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Kompatibilita s ROS 1"
                    },
                    {
                        "type": "text",
                        "content": "Existuje viaceré spôsoby, ako prepojiť ROS 1 a ROS 2, napr. ros1_bridge alebo rosbridge, ktoré umožňujú výmenu správ medzi ROS 1 a ROS 2. To je užitočné pri postupnom prechode na novú platformu alebo pri zachovaní starších uzlov, ktoré ešte neboli portované do ROS 2."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Hlavné rozdiely medzi ROS 2 a ROS 1"
                    },
                    {
                        "type": "subtitle",
                        "content": "Podporované platformy"
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 1",
                        "description": "– Bežne používané na Linuxe (Ubuntu), hoci existujú neoficiálne porty aj na iné systémy."
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 2",
                        "description": "– Oficiálne podporuje Ubuntu, Windows 10 a macOS (okrem iného). To otvára dvere väčšej komunite vývojárov a rozširuje možnosti nasadenia (vrátane embedded platforiem)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Programovacie jazyky"
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 1",
                        "description": "– C++ (staršie normy, najmä C++03), Python 2 (mnohé balíky)."
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 2",
                        "description": "– C++11/14 (a novšie), Python 3.5+ (napr. Foxy používa 3.8 v Ubuntu 20.04)."
                    },
                    {
                        "type": "text",
                        "content": "Novšie verzie C++ a Pythonu prinášajú lepšiu efektivitu a modernejšie knižnice."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Middleware / Komunikačná vrstva"
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 1",
                        "description": "– Vždy musíme spustiť roscore (Master), ktorý koordinuje názvy tém, služieb a stará sa o prepojenie uzlov."
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 2",
                        "description": "– Používa DDS (Data Distribution Service) ako komunikačnú vrstvu. Vďaka tomu:\n  - Neexistuje centralizovaný Master – objavovanie uzlov je distribuované.\n  - Rôzne implementácie DDS (FastDDS, Cyclone DDS, RTI Connext atď.) ponúkajú rôzne stupne výkonu a QoS.\n  - Nástroje real-time komunikácie a robustnejšie spracovanie výpadkov."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Kompilácia projektov"
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 1",
                        "description": "– catkin_make (prípadne catkin_make_isolated)."
                    },
                    {
                        "type": "bullet",
                        "item": "ROS 2",
                        "description": "– colcon build – univerzálny nástroj, ktorý vie pracovať nielen s amentom, ale aj s inými build systémami (CMake, Python, Gradle, atď.)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Architektúra a modularita"
                    },
                    {
                        "type": "text",
                        "content": "ROS 1 rely (prepojené cez rosmaster), kým ROS 2 umožňuje uzlom spoznávať sa cez DDS a nepotrebujú dedikovaný centrálny proces."
                    },
                    {
                        "type": "text",
                        "content": "V ROS 2 existujú tzv. components (komponenty, v C++ tzv. kompozície uzlov), ktoré uľahčujú spúšťať viacero uzlov v jedinom procese, čím sa znižuje overhead pri komunikácii medzi uzlami a zefektívňuje vývoj aj nasadenie."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Zhrnutie"
                    },
                    {
                        "type": "text",
                        "content": "ROS 2 sa snaží zachovať filozofiu modulárneho, distribuovaného a otvoreného vývoja robotických riešení, avšak zavádza kľúčové vylepšenia:"
                    },
                    {
                        "type": "bullet",
                        "item": "Distribuované objavovanie (DDS)",
                        "description": "– Odstránenie centrálneho Master v prospech distribuovaného objavovania."
                    },
                    {
                        "type": "bullet",
                        "item": "Podpora viacerých operačných systémov",
                        "description": "– Oficiálne podporované platformy zahŕňajú Linux, Windows a macOS."
                    },
                    {
                        "type": "bullet",
                        "item": "Reálne-časové a spoľahlivejšie scenáre",
                        "description": "– Vďaka Quality of Service (QoS) a DDS."
                    },
                    {
                        "type": "bullet",
                        "item": "Modernejšie programovacie jazyky",
                        "description": "– Podpora pre C++11/14 a Python 3.x."
                    },
                    {
                        "type": "bullet",
                        "item": "Nový build systém",
                        "description": "– Colcon + ament poskytujú efektívnejšie nástroje na zostavovanie balíkov."
                    },
                    {
                        "type": "text",
                        "content": "Ak už poznáte ROS 1, pri prechode na ROS 2 je potrebné naučiť sa:"
                    },
                    {
                        "type": "bullet",
                        "item": "Práca s príkazmi",
                        "description": "– Spúšťať uzly a pracovať s príkazmi ako ros2 run, ros2 topic list, atď."
                    },
                    {
                        "type": "bullet",
                        "item": "Tvorba a zostavovanie balíkov",
                        "description": "– Používať colcon na zostavovanie ROS 2 balíkov."
                    },
                    {
                        "type": "bullet",
                        "item": "Využitie nových funkcií DDS",
                        "description": "– Pochopenie QoS profilov, spôsobov discovery a iných noviniek."
                    },
                    {
                        "type": "bullet",
                        "item": "Riešenie rozdielov v knižniciach",
                        "description": "– Prepojenie a prispôsobenie balíkov z ROS 1 na ROS 2."
                    },
                    {
                        "type": "text",
                        "content": "Rozhodnutie, či použiť ROS 1 alebo ROS 2, často závisí od:"
                    },
                    {
                        "type": "bullet",
                        "item": "Požiadaviek na reálny čas",
                        "description": "– Ak potrebujete deterministické spracovanie dát."
                    },
                    {
                        "type": "bullet",
                        "item": "Cieľovej platformy",
                        "description": "– Windows/macOS vs. Linux."
                    },
                    {
                        "type": "bullet",
                        "item": "Dostupnosti balíkov",
                        "description": "– Nie všetky balíky z ROS 1 sú dostupné v ROS 2."
                    },
                    {
                        "type": "bullet",
                        "item": "Komunity a podpory",
                        "description": "– ROS 2 naberá na popularite a je budúcnosťou ROS ekosystému."
                    },
                    {
                        "type": "text",
                        "content": "Kombinovaná inštalácia: V prípade, že potrebujete prepojiť staršie uzly z ROS 1 a nové uzly z ROS 2, existuje ros1_bridge, ktorý umožňuje komunikáciu naprieč verziami. Takto je možné zavádzať ROS 2 postupne, bez nutnosti okamžitého refaktoringu celého systému."
                    }                                                                            
                ]
            }
        ]
    },
    {
        "id": "module-6",
        "name": "Modul 6: OpenCV",
        "lectures": [
            { 
                "id": "lecture-6-1", 
                "name": "Prednáška 6 - OpenCV - základný prehľad",
                "description": [
                    {
                        "type": "title",
                        "content": "Úvod do OpenCV"
                    },
                    {
                        "type": "image-short",
                        "src": "https://res.cloudinary.com/devzsrl7h/image/upload/v1736965639/OpenCV_logo_black-3874605940_frlkie.png",
                        "alt": "open cv logo"
                    },
                    {
                        "type": "text",
                        "content": "<a href='https://opencv.org/' target='_blank'>OpenCV</a> je otvorená knižnica určená na spracovanie a analýzu obrazu (Computer Vision). Poskytuje nástroje na rôzne operácie: detekciu objektov, rozpoznávanie tvárí, spracovanie videa, filtráciu obrazu a iné."
                    },                    
                    {
                        "type": "text",
                        "content": "Využíva sa v mnohých oblastiach, ako sú robotika, medicína, autonómne vozidlá či bezpečnostné systémy."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Hlavné vlastnosti"
                    },
                    {
                        "type": "bullet",
                        "item": "Open source",
                        "description": "– Bezplatne dostupná, veľká komunita prispievateľov."
                    },
                    {
                        "type": "bullet",
                        "item": "Multiplatformová",
                        "description": "– Beží na Windows, Linux, macOS, Android, iOS."
                    },
                    {
                        "type": "bullet",
                        "item": "Podpora viacerých jazykov",
                        "description": "– C++, Python, Java a iné."
                    },
                    {
                        "type": "bullet",
                        "item": "Rozsiahly rozsah funkcií",
                        "description": "– Od základných filtrov (Gaussian Blur) až po pokročilé algoritmy (detekcia tvárí, sledovanie objektov)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Kľúčové moduly"
                    },
                    {
                        "type": "bullet",
                        "item": "core",
                        "description": "– Základné dátové štruktúry, matice, vektory."
                    },
                    {
                        "type": "bullet",
                        "item": "imgproc",
                        "description": "– Spracovanie obrazu (filtrovanie, morfologické operácie, detekcia hrán)."
                    },
                    {
                        "type": "bullet",
                        "item": "objdetect",
                        "description": "– Detekcia objektov (napr. Haar kaskády)."
                    },
                    {
                        "type": "bullet",
                        "item": "video",
                        "description": "– Spracovanie a analýza videa (detekcia pohybu, sledovanie)."
                    },
                    {
                        "type": "bullet",
                        "item": "ml",
                        "description": "– Zabudované algoritmy strojového učenia."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Typické použitie"
                    },
                    {
                        "type": "bullet",
                        "item": "Detekcia a rozpoznávanie",
                        "description": "– Rozpoznávanie tvárí, QR kódov, dopravných značiek."
                    },
                    {
                        "type": "bullet",
                        "item": "Filtrácia a úprava obrazu",
                        "description": "– Odstránenie šumu, doostrovanie, zmena veľkosti alebo orez."
                    },
                    {
                        "type": "bullet",
                        "item": "Sledovanie objektov",
                        "description": "– Trackovanie pohybu vo video sekvenciách."
                    },
                    {
                        "type": "bullet",
                        "item": "3D rekonštrukcia",
                        "description": "– Stereo kamera, extrakcia hĺbky z rôznych uhlov pohľadu."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Prepojenie OpenCV s ROSMASTER R2"
                    },
                    {
                        "type": "text",
                        "content": "OpenCV je kľúčovým nástrojom pre vizuálnu analýzu na ROSMASTER R2. Používa sa na spracovanie dát zo senzorov, ako sú kamery, a umožňuje realizovať úlohy, ako je rozpoznávanie objektov, sledovanie pohybu a 3D mapovanie. V kombinácii s ROS frameworkom poskytuje efektívnu integráciu medzi softvérom a hardvérom robota."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Záver"
                    },
                    {
                        "type": "text",
                        "content": "OpenCV je univerzálny nástroj, ktorý dokáže pokryť väčšinu potrieb v oblasti spracovania obrazu a videa. Pre začiatočníkov je ideálne začať s jednoduchými príkladmi (dostupné tutoriály na GitHube a v dokumentácii) a postupne prechádzať k zložitejším úlohám, ako je detekcia objektov, sledovanie a pokročilá počítačová vízia."
                    }                                                                              
                ]
            }
        ],
        "exercises": [
            { 
                "id": "exercise-6-1",
                "name": "Cvičenie 6.1 - Základy OpenCV",
                "description": [
                    {
                        "type": "title",
                        "content": "Práca s obrázkami"
                    },
                    {
                        "type": "code",
                        "content": "import cv2 as cv\n\nif __name__ == '__main__':\n    img = cv.imread('my_image.jpg')  # Načítanie obrázka z aktuálneho priečinka.\n\n    cv.imwrite('my_image_new.jpg', img)  # Uloženie novej verzie načítaného obrázka.\n    new_img = cv.imread('my_image_new.jpg')  # Načítanie novo uloženého obrázka.\n\n    while True:\n        cv.imshow('frame', img)  # Zobrazenie pôvodného obrázka v okne s názvom 'frame'.\n        cv.imshow('new_frame', new_img)  # Zobrazenie nového obrázka v okne 'new_frame'.\n\n        action = cv.waitKey(10) & 0xFF  # Čakanie na stlačenie klávesu každých 10 ms.\n        if action == ord('q') or action == 113:  # Ak používateľ stlačí 'q' alebo 'Q', ukončí sa slučka.\n            break\n\n    cv.destroyAllWindows()  # Zatvorenie všetkých otvorených okien."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Používanie kamery"
                    },
                    {
                        "type": "code",
                        "content": "import cv2 as cv\n\nif __name__ == '__main__':\n    frame = cv.VideoCapture(0)  # Otvorenie kamery (0 znamená predvolenú kameru).\n\n    while frame.isOpened():\n        ret, img = frame.read()  # Čítanie aktuálneho snímku z kamery.\n        cv.imshow('frame', img)  # Zobrazenie aktuálneho snímku v okne 'frame'.\n\n        action = cv.waitKey(10) & 0xFF  # Čakanie na stlačenie klávesu každých 10 ms.\n        if action == ord('q') or action == 113:  # Ak používateľ stlačí 'q' alebo 'Q', ukončí sa slučka.\n            break\n\n    frame.release()  # Uvoľnenie kamery.\n    cv.destroyAllWindows()  # Zatvorenie všetkých otvorených okien."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Manipulácia s obrázkami"
                    },
                    {
                        "type": "code",
                        "content": "import cv2\nimport numpy as np\n\nif __name__ == '__main__':\n    img = cv2.imread('my_image.jpg')  # Načítanie obrázka.\n    imgInfo = img.shape  # Získanie rozmerov obrázka.\n    height, width, deep = imgInfo  # Extrakcia výšky, šírky a počtu kanálov.\n\n    newImgInfo = (height * 2, width, deep)  # Vytvorenie rozmerov pre nový obrázok.\n    dst = np.zeros(newImgInfo, np.uint8)  # Vytvorenie prázdneho obrázka s nulovými hodnotami.\n\n    for i in range(height):\n        for j in range(width):\n            dst[i, j] = img[i, j]  # Kopírovanie pôvodného obrázka.\n            dst[height * 2 - i - 1, j] = img[i, j]  # Pridanie zrkadlovej verzie obrázka.\n\n    while True:\n        cv2.imshow('Original', img)  # Zobrazenie pôvodného obrázka.\n        cv2.imshow('Mirrored', dst)  # Zobrazenie obrázka s pridanou zrkadlovou verziou.\n\n        action = cv2.waitKey(10) & 0xFF  # Čakanie na stlačenie klávesu.\n        if action == ord('q') or action == 113:  # Ukončenie slučky po stlačení 'q'.\n            break\n\n    cv2.destroyAllWindows()  # Zatvorenie všetkých okien."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Kreslenie tvarov na obrázok"
                    },
                    {
                        "type": "code",
                        "content": "import cv2\nimport numpy as np\n\nif __name__ == '__main__':\n    img = cv2.imread('my_image.jpg')  # Načítanie obrázka.\n\n    circle = cv2.circle(img, (80, 80), 50, (255, 0, 255), 10)  # Nakreslenie kruhu.\n    rect = cv2.rectangle(img, (50, 20), (100, 100), (0, 255, 0), 5)  # Nakreslenie obdĺžnika.\n    cv2.putText(img, 'OpenCV Rocks!', (150, 150), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)  # Pridanie textu.\n\n    while True:\n        cv2.imshow('Shapes', img)  # Zobrazenie obrázka s nakreslenými tvarmi.\n\n        action = cv2.waitKey(10) & 0xFF  # Čakanie na stlačenie klávesu.\n        if action == ord('q') or action == 113:  # Ukončenie slučky po stlačení 'q'.\n            break\n\n    cv2.destroyAllWindows()  # Zatvorenie všetkých okien."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Záver"
                    },
                    {
                        "type": "text",
                        "content": "Tieto základné skripty demonštrujú, ako používať OpenCV na rôzne operácie s obrázkami a kamerou. Existuje množstvo online zdrojov a tutoriálov, ktoré vám umožnia preskúmať ďalšie funkcie OpenCV. Začnite experimentovať s týmito základmi a pripravte sa na prechod k zložitejším témam a aplikáciám OpenCV, ktoré preskúmame v nasledujúcom cvičení."
                    }                                     
                ]
            },
            { 
                "id": "exercise-6-2", 
                "name": "Cvičenie 6.2 - Odhad pózy pomocou OpenCV",
                "description": [
                    {
                        "type": "title",
                        "content": "Úvod do modelu a princípov odhadu pózy"
                    },
                    {
                        "type": "text",
                        "content": "Odhad pózy je technika, ktorá identifikuje pozície kľúčových bodov na ľudskom tele, ako sú kĺby alebo hlavné časti tela. Model OpenPose analyzuje vstupný obraz alebo video a deteguje časti tela a spojenia medzi nimi. Tento model využíva konvolučné neurónové siete (CNN) na rozpoznávanie vzorov v obraze a určovanie presných polôh jednotlivých bodov tela."
                    },
                    {
                        "type": "title",
                        "content": "Časti kódu a vysvetlenie"
                    },
                    {
                        "type": "subtitle",
                        "content": "Definícia častí tela a párov"
                    },
                    {
                        "type": "code",
                        "content": "import cv2 as cv\n\n# Definícia častí tela a ich párov pre kreslenie póz\nBODY_PARTS = {\"Nose\": 0, \"Neck\": 1, \"RShoulder\": 2, \"RElbow\": 3, \"RWrist\": 4,\n              \"LShoulder\": 5, \"LElbow\": 6, \"LWrist\": 7, \"RHip\": 8, \"RKnee\": 9,\n              \"RAnkle\": 10, \"LHip\": 11, \"LKnee\": 12, \"LAnkle\": 13, \"REye\": 14,\n              \"LEye\": 15, \"REar\": 16, \"LEar\": 17, \"Background\": 18}\nPOSE_PAIRS = [[\"Neck\", \"RShoulder\"], [\"Neck\", \"LShoulder\"], [\"RShoulder\", \"RElbow\"],\n              [\"RElbow\", \"RWrist\"], [\"LShoulder\", \"LElbow\"], [\"LElbow\", \"LWrist\"],\n              [\"Neck\", \"RHip\"], [\"RHip\", \"RKnee\"], [\"RKnee\", \"RAnkle\"], [\"Neck\", \"LHip\"],\n              [\"LHip\", \"LKnee\"], [\"LKnee\", \"LAnkle\"], [\"Neck\", \"Nose\"], [\"Nose\", \"REye\"],\n              [\"REye\", \"REar\"], [\"Nose\", \"LEye\"], [\"LEye\", \"LEar\"]]"
                    },                    
                    {
                        "type": "text",
                        "content": "BODY_PARTS definuje mapovanie častí tela na ich indexy vo výstupe modelu. POSE_PAIRS obsahuje párované časti tela, ktoré sa majú vizualizovať pomocou čiar."
                    },
                    {
                        "type": "subtitle",
                        "content": "Načítanie predtrénovaného modelu"
                    },
                    {
                        "type": "code",
                        "content": "net = cv.dnn.readNetFromTensorflow(\"graph_opt.pb\")"
                    },
                    {
                        "type": "text",
                        "content": "Tento riadok načíta predtrénovaný model uložený vo formáte TensorFlow. Súbor 'graph_opt.pb' obsahuje váhy a architektúru modelu OpenPose."
                    },
                    {
                        "type": "subtitle",
                        "content": "Funkcia na odhad pózy"
                    },
                    {
                        "type": "code",
                        "content": "def estimate_pose(frame):\n    frameHeight, frameWidth = frame.shape[:2]\n    # Vytvorenie blobu a nastavenie vstupu pre model\n    net.setInput(cv.dnn.blobFromImage(frame, 1.0, (368, 368), (127.5, 127.5, 127.5), swapRB=True, crop=False))\n    out = net.forward()  # Spustenie predikcie\n    out = out[:, :19, :, :]  # Výstup modelu obsahuje 19 častí tela\n\n    points = []\n    for i in range(len(BODY_PARTS)):\n        # Extrahovanie heatmapy pre danú časť tela\n        heatMap = out[0, i, :, :]\n        _, conf, _, point = cv.minMaxLoc(heatMap)  # Nájdeme bod s najväčšou dôverou\n        x = int((frameWidth * point[0]) / out.shape[3])\n        y = int((frameHeight * point[1]) / out.shape[2])\n        # Pridanie bodu, ak je dôvera vyššia ako 0.2\n        points.append((x, y) if conf > 0.2 else None)\n\n    # Kreslenie čiar a bodov medzi párovanými časťami tela\n    for pair in POSE_PAIRS:\n        partFrom = pair[0]\n        partTo = pair[1]\n        idFrom = BODY_PARTS[partFrom]\n        idTo = BODY_PARTS[partTo]\n        if points[idFrom] and points[idTo]:\n            cv.line(frame, points[idFrom], points[idTo], (0, 255, 0), 3)  # Spojenie čiarou\n            cv.ellipse(frame, points[idFrom], (3, 3), 0, 0, 360, (0, 0, 255), cv.FILLED)  # Bod\n            cv.ellipse(frame, points[idTo], (3, 3), 0, 0, 360, (0, 0, 255), cv.FILLED)  # Bod\n    return frame"
                    },
                    {
                        "type": "text",
                        "content": "Táto funkcia analyzuje vstupný obraz, identifikuje kľúčové body tela a vizualizuje ich pomocou čiar a bodov."
                    },
                    {
                        "type": "subtitle",
                        "content": "Hlavná časť programu"
                    },
                    {
                        "type": "code",
                        "content": "if __name__ == '__main__':\n    # Použitie webkamery na snímanie\n    capture = cv.VideoCapture(0)\n    while capture.isOpened():\n        ret, frame = capture.read()\n        if not ret:\n            break\n\n        # Odhad pózy v snímke\n        frame = estimate_pose(frame)\n        cv.imshow('Pose Estimation', frame)  # Zobrazenie výsledkov\n\n        # Ukončenie pri stlačení klávesy 'q'\n        if cv.waitKey(10) & 0xFF == ord('q'):\n            break\n\n    capture.release()\n    cv.destroyAllWindows()"
                    },
                    {
                        "type": "text",
                        "content": "Hlavná časť programu inicializuje webkameru, spracováva snímky pomocou funkcie estimate_pose a zobrazuje výstupy v reálnom čase."
                    },
                    {
                        "type": "title",
                        "content": "Zhrnutie"
                    },
                    {
                        "type": "text",
                        "content": "V tomto cvičení sme použili model OpenPose na odhad pózy v reálnom čase pomocou webkamery. Naučili sme sa identifikovať časti tela, spojiť ich čiarami a vizualizovať výsledky. Tieto základy sú dôležité pre pokročilejšie aplikácie spracovania obrazu."
                    }
                    
                ] 
            },
            {
                "id": "exercise-6-3",
                "name": "Cvičenie 6.3 - Detekcia objektov pomocou OpenCV a SSD MobileNet V2",
                "description": [
                    {
                        "type": "text",
                        "content": "V tomto cvičení sa naučíte, ako používať OpenCV a model SSD MobileNet V2 na detekciu objektov v reálnom čase. Tento model dokáže identifikovať rôzne objekty na základe predtrénovaného modelu COCO (Common Objects in Context)."
                    },
                    {
                        "type": "subtitle",
                        "content": "Princípy detekcie objektov"
                    },
                    {
                        "type": "text",
                        "content": "Detekcia objektov zahŕňa identifikáciu konkrétnych objektov na obrázku alebo videu. Použitím modelu SSD MobileNet V2 dokážeme lokalizovať a označiť objekty, ako sú osoby, autá, bicykle a mnoho ďalších. Model bol predtrénovaný na datasete COCO, ktorý obsahuje 80 tried objektov."
                    },
                    {
                        "type": "title",
                        "content": "Kód"
                    },
                    {
                        "type": "subtitle",
                        "content": "Načítanie názvov tried a predtrénovaného modelu"
                    },
                    {
                        "type": "code",
                        "content": "import cv2 as cv\nimport numpy as np\n\n# Načítanie názvov tried COCO\nwith open('object_detection_coco.txt', 'r') as f:\n    class_names = f.read().strip().split('\\n')\n\n# Generovanie náhodných farieb pre každú triedu\nCOLORS = np.random.uniform(0, 255, size=(len(class_names), 3))\n\n# Načítanie predtrénovaného modelu DNN (SSD MobileNet V2)\nmodel = cv.dnn.readNet(model='frozen_inference_graph.pb', config='ssd_mobilenet_v2_coco_2018_03_29.pbtxt', framework='TensorFlow')"
                    },
                    {
                        "type": "subtitle",
                        "content": "Funkcia na detekciu objektov v snímke"
                    },
                    {
                        "type": "code",
                        "content": "def detect_objects(frame):\n    # Získanie rozmerov snímky\n    image_height, image_width, _ = frame.shape\n    # Vytvorenie blobu (predspracovanie snímky pre model)\n    blob = cv.dnn.blobFromImage(image=frame, size=(300, 300), mean=(104, 117, 123), swapRB=True)\n    model.setInput(blob)  # Nastavenie vstupu pre model\n    detections = model.forward()  # Spustenie predikcie\n\n    # Spracovanie každej detekcie\n    for detection in detections[0, 0, :, :]:\n        confidence = detection[2]  # Pravdepodobnosť detekcie\n        if confidence > 0.4:  # Prah dôveryhodnosti\n            class_id = int(detection[1])  # ID triedy objektu\n            class_name = class_names[class_id - 1]  # Názov triedy\n            color = COLORS[class_id]  # Farba pre triedu\n\n            # Výpočet súradníc ohraničujúceho boxu\n            box_x = int(detection[3] * image_width)\n            box_y = int(detection[4] * image_height)\n            box_width = int(detection[5] * image_width)\n            box_height = int(detection[6] * image_height)\n\n            # Kreslenie ohraničujúceho boxu a názvu objektu\n            cv.rectangle(frame, (box_x, box_y), (box_width, box_height), color, thickness=2)\n            cv.putText(frame, class_name, (box_x, box_y - 10), cv.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)\n    return frame"
                    },
                    {
                        "type": "subtitle",
                        "content": "Hlavná časť programu"
                    },
                    {
                        "type": "code",
                        "content": "if __name__ == '__main__':\n    # Použitie webkamery na snímanie\n    capture = cv.VideoCapture(0)\n    while capture.isOpened():\n        ret, frame = capture.read()\n        if not ret:\n            break\n\n        # Detekcia objektov v snímke\n        frame = detect_objects(frame)\n        cv.imshow('Object Detection', frame)  # Zobrazenie výsledkov\n\n        # Ukončenie pri stlačení klávesy 'q'\n        if cv.waitKey(10) & 0xFF == ord('q'):\n            break\n\n    capture.release()\n    cv.destroyAllWindows()"
                    },
                    {
                        "type": "subtitle",
                        "content": "Zhrnutie"
                    },
                    {
                        "type": "text",
                        "content": "Toto cvičenie vám ukázalo, ako používať OpenCV a model SSD MobileNet V2 na detekciu objektov v reálnom čase. Môžete experimentovať s inými prahmi dôveryhodnosti, snímkami alebo videami, aby ste získali lepšie výsledky."
                    }
                ]
            }
        ]
    },
    {
        "id": "module-7",
        "name": "Modul 7: Základy ovládania kamery",
        "lectures": [
            { 
                "id": "lecture-7-1", 
                "name": "Prednáška 7 - Hĺbková kamera: detailnejší pohľad",
                "description": [
                    {
                        "type": "title",
                        "content": "Čo je hĺbková kamera?"
                    },
                    {
                        "type": "text",
                        "content": "Hĺbková kamera je špeciálny typ snímacieho zariadenia, ktorý dokáže merať vzdialenosť objektov od snímača (tzv. hĺbku) a popri tom zaznamenávať aj obrazové dáta v klasickom 2D formáte. Na rozdiel od bežných RGB kamier, ktoré zachytávajú len farebné spektrum, hĺbková kamera vytvára zároveň 3D reprezentáciu scény. Technológie hĺbkových kamier sa líšia (napr. štruktúrované svetlo, time-of-flight a pod.), ale ich spoločný cieľ je poskytnúť informáciu o tvare a vzdialenosti pozorovaných objektov."
                    },
                    {
                        "type": "bullet",
                        "item": "Štruktúrované svetlo",
                        "description": "Na povrch sa premieta vzor (mriežka alebo bodová mapa). Kamera následne sníma deformácie tohto vzoru, z čoho sa vypočíta hĺbka."
                    },
                    {
                        "type": "bullet",
                        "item": "Time-of-flight",
                        "description": "Vysiela sa infračervené svetlo a meria sa čas, za aký sa odrazí späť, z čoho je možné získať vzdialenosť."
                    },
                    {
                        "type": "text",
                        "content": "V praxi umožňuje hĺbková kamera robotom a autonómnym zariadeniam lepšie chápať prostredie, zaznamenávať polohu a rozmery objektov a efektívne sa vyhýbať prekážkam."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Astra Pro Plus na ROSmaster R2"
                    },
                    {
                        "type": "text",
                        "content": "Na platforme ROSmaster R2 je nainštalovaná Astra Pro Plus – 3D hĺbková kamera od firmy Orbbec, ktorá využíva technológiu štruktúrovaného svetla. Táto kamera disponuje nielen bežným farebným (RGB) senzorom, ale aj samostatným hĺbkovým senzorom, čo umožňuje:"
                    },
                    {
                        "type": "subtitle",
                        "content": "Hĺbkové snímanie (Depth Sensing)"
                    },
                    {
                        "type": "bullet",
                        "description": "Robot rozpozná, ako ďaleko sú objekty, steny alebo prekážky."
                    },
                    {
                        "type": "bullet",
                        "description": "Dáta z hĺbky sa integrujú do softvéru robota (napr. do ROS uzlov) na účely mapovania a navigácie."
                    },
                    {
                        "type": "subtitle",
                        "content": "Detekcia prekážok (Obstacle Detection)"
                    },
                    {
                        "type": "bullet",
                        "description": "Kamera poskytuje 3D informácie na vyhodnocovanie vzdialenosti a tvaru prekážok."
                    },
                    {
                        "type": "bullet",
                        "description": "Robot môže dynamicky upravovať trasu, aby sa vyhol kolíziám."
                    },
                    {
                        "type": "subtitle",
                        "content": "3D mapovanie a rekonštrukcia (3D Mapping/Reconstruction)"
                    },
                    {
                        "type": "bullet",
                        "description": "Vytváranie 3D modelu prostredia pre autonómnu orientáciu."
                    },
                    {
                        "type": "bullet",
                        "description": "Umožňuje robustnejšie SLAM (Simultaneous Localization and Mapping) algoritmy."
                    },
                    {
                        "type": "subtitle",
                        "content": "Interakcia s ľuďmi (Human-Interaction Tasks)"
                    },
                    {
                        "type": "bullet",
                        "description": "Možnosť rozpoznať gestá, polohu tela či tváre."
                    },
                    {
                        "type": "bullet",
                        "description": "Hodí sa na rôzne HRI (Human-Robot Interaction) aplikácie, kde je dôležité rozlíšiť a sledovať ľudí v okolí."
                    },
                    {
                        "type": "text",
                        "content": "Na ROSmaster R2 kamera spolupracuje s balíčkami v ROS ekosystéme, vďaka čomu môžu vývojári naplno využiť jej funkcionalitu. Dáta z kamery sa prenášajú priamo do ROS grafu (tzv. ROS topics) a môžu ich spracúvať ďalšie nody (napr. detekcia objektov, navigačné algoritmy a pod.)."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Využitie na autonómnych robotoch a vozidlách"
                    },
                    {
                        "type": "text",
                        "content": "Hĺbkové kamery ako Astra Pro Plus nie sú využívané len na ROSmaster R2. Sú bežné aj v iných autonómnych platformách, vrátane robotických ramien, dronov či autonómnych vozidiel. Všade tam, kde je potrebné:"
                    },
                    {
                        "type": "bullet",
                        "item": "Presné snímanie priestoru",
                        "description": "Na identifikáciu objektov, ľudí či prekážok."
                    },
                    {
                        "type": "bullet",
                        "item": "Bezpečnosť",
                        "description": "Kamery môžu spustiť núdzové zastavenie, ak je detegovaná človeku nebezpečná kolízia."
                    },
                    {
                        "type": "bullet",
                        "item": "Interaktívne funkcie",
                        "description": "Gestá, rozpoznávanie osôb, identifikácia objektov a podobne."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Konkrétne vlastnosti Astra Pro Plus"
                    },
                    {
                        "type": "subtitle",
                        "content": "Kompaktné rozmery a jednoduchá inštalácia"
                    },
                    {
                        "type": "bullet",
                        "description": "Dizajn je prispôsobený pre jednoduchú montáž na rôzne platformy (roboty, statívy, steny)."
                    },
                    {
                        "type": "subtitle",
                        "content": "Integrovaný RGB aj hĺbkový senzor"
                    },
                    {
                        "type": "bullet",
                        "description": "Umožňuje snímať farebný obraz + hĺbku súčasne."
                    },
                    {
                        "type": "bullet",
                        "description": "Pre aplikácie (napr. rozpoznávanie objektov v 3D, generovanie farebných 3D modelov)."
                    },
                    {
                        "type": "subtitle",
                        "content": "Vyššia presnosť a kratšia minimálna meracia vzdialenosť"
                    },
                    {
                        "type": "bullet",
                        "description": "V porovnaní so staršími modelmi dokáže poskytovať hĺbkové dáta s jemnejším rozlíšením na kratšie vzdialenosti."
                    },
                    {
                        "type": "subtitle",
                        "content": "Kompatibilita s ROS"
                    },
                    {
                        "type": "bullet",
                        "description": "Na ROSmaster R2 beží balíček astra_camera, ktorý sa stará o inicializáciu a publikovanie hĺbkových a farebných dát do ROS topicov."
                    },
                    {
                        "type": "bullet",
                        "description": "Vďaka tomu je integrácia s existujúcimi ROS nástrojmi (rqt, RViz, tf, atď.) pomerne jednoduchá."
                    },
                    {
                        "type": "subtitle",
                        "content": "Podpora pre vývojové platformy"
                    },
                    {
                        "type": "bullet",
                        "description": "Orbbec poskytuje SDK (Astra SDK), ukážkové projekty a návody. Pre robotické aplikácie je najpodstatnejšie, že existuje aj ROS driver, čím sa uľahčuje nasadenie v robotických systémoch."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Zhrnutie a dôvod nasadenia"
                    },
                    {
                        "type": "bullet",
                        "item": "Všestranné využitie",
                        "description": "Spojenie RGB a hĺbky v jednej kamere poskytuje robustnú priestorovú informáciu."
                    },
                    {
                        "type": "bullet",
                        "item": "Vývojárska komunita",
                        "description": "Vďaka existujúcim ROS balíčkom je integrácia do robotických scenárov rýchla."
                    },
                    {
                        "type": "bullet",
                        "item": "Presnosť a výkon",
                        "description": "Kamera dokáže s dostatočnou presnosťou (aj v reálnom čase) poskytovať dáta pre navigáciu a vyhýbanie sa prekážkam."
                    },
                    {
                        "type": "bullet",
                        "item": "Budúce rozšírenia",
                        "description": "Možno doinštalovať ďalšie softvérové moduly (napr. na rozpoznávanie gest, ľudských postáv, sledovanie tváre), čo je kľúčové pre ľudskú-robotickú interakciu."
                    }              
                ] 
            }
        ],
        "exercises": [
            { 
                "id": "exercise-7-1", 
                "name": "Cvičenie 7.1 - Astra SDK: Inštalácia a spustenie",
                "description": [
                    {
                        "type": "title",
                        "content": "Stiahnutie a inštalácia Astra SDK"
                    },
                    {
                        "type": "text",
                        "content": "<a href='https://www.orbbec.com/developers/astra-sdk/' target='_blank'>Astra SDK</a> je oficiálny balík nástrojov od spoločnosti Orbbec, ktorý poskytuje knižnice, dokumentáciu a nástroje na prístup k dátam z RGB a hĺbkového senzora. Umožňuje vývoj aplikácií pre robotiku, 3D mapovanie a ďalšie oblasti."
                    },
                    {
                        "type": "subtitle",
                        "content": "Príprava adresára a stiahnutie Astra SDK"
                    },
                    {
                        "type": "text",
                        "content": "Najskôr vytvorte adresár pre SDK a stiahnite si archív SDK zo stránky Orbbec pomocou wget. Skontrolujte, či vyberáte správnu verziu pre váš operačný systém."
                    },
                    {
                        "type": "code",
                        "content": "mkdir -p ~/astra_sdk && cd ~/astra_sdk\nwget https://path_to_sdk_zip_file.zip"
                    },
                    {
                        "type": "subtitle",
                        "content": "Rozbalenie stiahnutého archívu"
                    },
                    {
                        "type": "text",
                        "content": "Po stiahnutí SDK súboru použite nástroj unzip na rozbalenie zip archívu. Po rozbalení nájdete tar.gz súbor, ktorý je potrebné ďalej rozbaliť."
                    },
                    {
                        "type": "code",
                        "content": "unzip AstraSDK-vX.X.X.zip\ntar -zxvf AstraSDK-vX.X.X-Ubuntu18.04-x86_64.tar.gz"
                    },
                    {
                        "type": "subtitle",
                        "content": "Inštalácia Astra SDK"
                    },
                    {
                        "type": "text",
                        "content": "Po rozbalení tar.gz archívu prejdite do priečinka 'install' a spustite inštalačný skript. Uistite sa, že máte dostatočné oprávnenia (použitie sudo)."
                    },
                    {
                        "type": "code",
                        "content": "cd AstraSDK-vX.X.X-Ubuntu18.04-x86_64/install\nsudo sh ./install.sh"
                    },
                    {
                        "type": "subtitle",
                        "content": "Záver"
                    },
                    {
                        "type": "text",
                        "content": "Týmto ste úspešne nainštalovali Astra SDK. SDK teraz môžete použiť na prístup k funkciám kamery a vývoj vlastných aplikácií."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Konfigurácia CMakeLists.txt súboru"
                    },
                    {
                        "type": "subtitle",
                        "content": "Prečo SimpleColorViewer-SFML?"
                    },
                    {
                        "type": "bullet",
                        "item": "Jednoduchosť",
                        "description": "Zobrazuje základné RGB dáta z kamery, vhodné pre začiatočníkov."
                    },
                    {
                        "type": "bullet",
                        "item": "Minimálne závislosti",
                        "description": "Používa iba SFML, ľahké na zostavenie."
                    },
                    {
                        "type": "bullet",
                        "item": "Overenie SDK",
                        "description": "Rýchlo preverí funkčnosť Astra SDK."
                    },
                    {
                        "type": "bullet",
                        "item": "Dobrý základ",
                        "description": "Slúži na pochopenie a ďalší rozvoj aplikácií."
                    },
                    {
                        "type": "subtitle",
                        "content": "Nájdite projekt SimpleColorViewer-SFML"
                    },
                    {
                        "type": "text",
                        "content": "Najskôr prejdite do adresára, kde sa nachádza ukážkový projekt SimpleColorViewer-SFML. Tento projekt je zvyčajne umiestnený v priečinku samples/sfml v rámci Astra SDK."
                    },
                    {
                        "type": "text",
                        "content": "Príklad príkazu na navigáciu (upravte cestu podľa vašej štruktúry):"
                    },
                    {
                        "type": "code",
                        "content": "cd AstraSDK-vX.X.X-Linux-aarch64/samples/sfml/SimpleColorViewer-SFML"
                    },
                    {
                        "type": "subtitle",
                        "content": "Otvorte súbor CMakeLists.txt"
                    },
                    {
                        "type": "text",
                        "content": "V tomto adresári by mal byť súbor CMakeLists.txt, ktorý definuje konfiguráciu pre zostavenie projektu."
                    },                    
                    {
                        "type": "code",
                        "content": "cmake_minimum_required(VERSION 3.16)\n\nproject(SimpleColorViewer-SFML)\n\n# Definícia názvu projektu\nset(_projname \"SimpleColorViewer-SFML\")\n\n# Explicitne definovaný priečinok pre spoločné zdroje\nset(SAMPLE_COMMON_DIR \"AstraSDK-vX.X.X-Ubuntu18.04-x86_64/samples/common\")\n\n# Zdroje projektu\nset(${_projname}_SOURCES\n  main.cpp\n  ${SAMPLE_COMMON_DIR}/key_handler.h\n)\n\n# Nájdite knižnicu SFML\nfind_package(SFML 2.5 COMPONENTS graphics window system REQUIRED)\n\n# Definícia zahrnutých adresárov Astra SDK a SFML\nset(ASTRA_SDK_INCLUDE \"AstraSDK-vX.X.X-Ubuntu18.04-x86_64/include\")\nset(ASTRA_SDK_LIB \"AstraSDK-vX.X.X-Ubuntu18.04-x86_64/lib\")\n\n# Zahrňte adresáre\ninclude_directories(${SFML_INCLUDE_DIR} ${ASTRA_SDK_INCLUDE} ${SAMPLE_COMMON_DIR})\n\n# Pridajte adresáre pre linkovanie knižníc\nlink_directories(${ASTRA_SDK_LIB})\n\n# Pridajte spustiteľný súbor\nadd_executable(${_projname} ${${_projname}_SOURCES})\n\n# Linkovanie SFML a Astra SDK knižníc\ntarget_link_libraries(${_projname} sfml-graphics sfml-window sfml-system\n    ${ASTRA_SDK_LIB}/libastra.so\n    ${ASTRA_SDK_LIB}/libastra_core.so\n)\n\n# Inštalujte cieľový binárny súbor\ninstall(TARGETS ${_projname} DESTINATION bin)"
                    },
                    {
                        "type": "bullet",
                        "item": "cmake_minimum_required a project",
                        "description": "Definujú minimálnu požadovanú verziu CMake a názov projektu."
                    },
                    {
                        "type": "bullet",
                        "item": "set",
                        "description": "Nastavuje premenné pre názov projektu, spoločné zdroje, zahrnuté adresáre a knižnice."
                    },
                    {
                        "type": "bullet",
                        "item": "SAMPLE_COMMON_DIR",
                        "description": "Cesta k zdieľaným súborom projektu."
                    },
                    {
                        "type": "bullet",
                        "item": "ASTRA_SDK_INCLUDE a ASTRA_SDK_LIB",
                        "description": "Cesty k zahrnutým súborom a knižniciam Astra SDK."
                    },
                    {
                        "type": "bullet",
                        "item": "find_package",
                        "description": "Vyhľadá a zahrnie knižnicu SFML."
                    },
                    {
                        "type": "bullet",
                        "item": "include_directories",
                        "description": "Definuje adresáre, kde kompilátor hľadá hlavičkové súbory."
                    },
                    {
                        "type": "bullet",
                        "item": "link_directories",
                        "description": "Definuje adresáre pre linkovanie knižníc."
                    },
                    {
                        "type": "bullet",
                        "item": "add_executable",
                        "description": "Pridá hlavný spustiteľný súbor pre projekt."
                    },
                    {
                        "type": "bullet",
                        "item": "target_link_libraries",
                        "description": "Pridá knižnice SFML a Astra SDK pre prepojenie so spustiteľným súborom."
                    },
                    {
                        "type": "bullet",
                        "item": "install",
                        "description": "Umožňuje inštaláciu spustiteľného súboru do definovaného priečinka."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Spustenie programu"
                    },
                    {
                        "type": "code",
                        "content": "mkdir build\ncd build"
                    },
                    {
                        "type": "code",
                        "content": "cmake .."
                    },
                    {
                        "type": "code",
                        "content": "make"
                    },
                    {
                        "type": "code",
                        "content": "./SimpleColorViewer-SFML"
                    },
                    {
                        "type": "text",
                        "content": "Po spustení programu by sa malo zobraziť okno, ktoré zobrazuje dáta RGB zo senzora Astra kamery v reálnom čase. Toto umožňuje jednoduché testovanie funkčnosti kamery a správnej inštalácie SDK."
                    },
                    {
                        "type": "title",
                        "content": "Zhrnutie"
                    },
                    {
                        "type": "text",
                        "content": "Týmto postupom ste úspešne nakonfigurovali a spustili program SimpleColorViewer-SFML. Správna konfigurácia CMakeLists.txt súboru zabezpečila správne zahrnutie knižníc a súborov Astra SDK a SFML. Program teraz dokáže zobrazovať dáta z kamery v reálnom čase a je pripravený na ďalšie úpravy a rozšírenia."
                    }
                    
                ]
            },
            { 
                "id": "exercise-7-2", 
                "name": "Cvičenie 7.2 - Základy SLAM",
                "description": [
                    {
                        "type": "title",
                        "content": "ORB-SLAM2: Systém pre simultánnu lokalizáciu a mapovanie"
                    },
                    {
                        "type": "text",
                        "content": "ORB-SLAM2 je systém na simultánnu lokalizáciu a mapovanie (SLAM) v reálnom čase, ktorý využíva monokulárne, stereoskopické (binokulárne) alebo RGB-D kamery na mapovanie prostredia a odhad pohybu kamery."
                    },
                    {
                        "type": "subtitle",
                        "content": "Monokulárne kamery"
                    },
                    {
                        "type": "text",
                        "content": "Monokulárne kamery zachytávajú 2D obrazy pomocou jednej šošovky. Tento typ kamery vyžaduje, aby ORB-SLAM2 určoval hĺbku a mierku trianguláciou cez viacero snímok, pretože hĺbková informácia nie je priamo dostupná."
                    },
                    {
                        "type": "subtitle",
                        "content": "Stereoskopické (binokulárne) kamery"
                    },
                    {
                        "type": "text",
                        "content": "Stereoskopické alebo binokulárne kamery pozostávajú z dvoch šošoviek umiestnených vedľa seba. Umožňujú priamy výpočet hĺbky analýzou rozdielu medzi dvoma obrazmi, čím poskytujú metrické informácie o hĺbke."
                    },
                    {
                        "type": "subtitle",
                        "content": "RGB-D kamery"
                    },
                    {
                        "type": "text",
                        "content": "RGB-D kamery, ako sú Kinect alebo Intel RealSense, zachytávajú farebné (RGB) obrazy aj hĺbkové dáta. Tieto kamery poskytujú presné hĺbkové informácie pre každý pixel bez potreby výpočtu rozdielov v obraze."
                    },
                    {
                        "type": "subtitle",
                        "content": "Hlavné vlastnosti ORB-SLAM2"
                    },
                    {
                        "type": "bullet",
                        "item": "Sledovanie (Tracking)",
                        "description": "Odhad pohybu kamery pomocou ORB (Oriented FAST and Rotated BRIEF) funkcií."
                    },
                    {
                        "type": "bullet",
                        "item": "Mapovanie (Mapping)",
                        "description": "Vytvára riedku 3D mapu prostredia."
                    },
                    {
                        "type": "bullet",
                        "item": "Uzavretie slučky (Loop Closing)",
                        "description": "Detekuje a opravuje slučky na zníženie posunu a zlepšenie presnosti."
                    },
                    {
                        "type": "text",
                        "content": "ORB-SLAM2 sa široko využíva v robotike, rozšírenej realite a autonómnych vozidlách. Je open-source a napísaný v jazyku C++."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Spustenie Docker kontajnera pre ORB-SLAM2 testy"
                    },
                    {
                        "type": "text",
                        "content": "Na vykonanie testov s monokulárnymi, binokulárnymi a RGB-D kamerami v rámci ORB-SLAM2 je potrebné vstúpiť do Docker kontajnera, kde je predkonfigurovaný všetok potrebný softvér a hardware."
                    },
                    {
                        "type": "subtitle",
                        "content": "Príkaz na spustenie Docker kontajnera"
                    },
                    {
                        "type": "code",
                        "content": "docker run -it --rm \\\n  --name multi_control \\\n  -e DISPLAY=$DISPLAY \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  --device=/dev/bus/usb/001/006 \\\n  --privileged \\\n  image_name /bin/bash"
                    },
                    {
                        "type": "text",
                        "content": "Tento príkaz spustí Docker kontajner s názvom 'multi_control', umožní prístup k zobrazovaciemu zariadeniu, USB zariadeniam a spustí interaktívnu shell reláciu v kontajneri."
                    },
                    {
                        "type": "text",
                        "content": "Docker kontajner slúži na izoláciu prostredia, v ktorom máme predinštalovaný a nakonfigurovaný softvér potrebný pre SLAM testy. Tým sa minimalizujú problémy s kompatibilitou softvéru, knižníc a operačného systému."
                    },
                    {
                        "type": "subtitle",
                        "content": "Dôležitosť parametrov --device a DISPLAY"
                    },
                    {
                        "type": "bullet",
                        "item": "--device",
                        "description": "Tento parameter odkazuje na konkrétnu kameru pripojenú k hosťovskému počítaču a umožňuje jej použitie vo vnútri kontajnera. Bez tohto parametra program v kontajneri nedokáže komunikovať s kamerou, a teda ani vykonávať testy SLAM, ktoré sú na nej závislé."
                    },
                    {
                        "type": "bullet",
                        "item": "DISPLAY a grafické prostredie",
                        "description": "Parametre ako -e DISPLAY a -v /tmp/.X11-unix:/tmp/.X11-unix umožňujú kontajneru prístup k grafickému rozhraniu hosťovského počítača. Tieto sú dôležité, aby program mohol zobrazovať výstupy, ako sú vizualizácie trajektórií, 3D máp alebo obraz z kamery. Bez nich program buď nebude fungovať, alebo nebude schopný ukázať žiadne výsledky na obrazovke."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Spustenie testov ORB-SLAM2"
                    },
                    {
                        "type": "subtitle",
                        "content": "Monocular test"
                    },
                    {
                        "type": "text",
                        "content": "Pre náš prípad navigujte do adresára:"
                    },
                    {
                        "type": "code",
                        "content": "cd /root/yahboomcar_ros2_ws/software/orbslam2/ORB_SLAM2-master"
                    },
                    {
                        "type": "text",
                        "content": "Spustite nasledujúci príkaz:"
                    },
                    {
                        "type": "code",
                        "content": "Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml data/MH01/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/MH01.txt"
                    },
                    {
                        "type": "text",
                        "content": "Výsledok: Test monocular kamery mapuje prostredie pomocou 2D obrazu. Hĺbku a mierku si systém odvodzuje z viacerých snímok v čase, čím generuje 3D mračno bodov."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "Stereo test"
                    },
                    {
                        "type": "text",
                        "content": "Pre náš prípad navigujte do adresára:"
                    },
                    {
                        "type": "code",
                        "content": "cd /root/yahboomcar_ros2_ws/software/orbslam2/ORB_SLAM2-master"
                    },
                    {
                        "type": "text",
                        "content": "Spustite nasledujúci príkaz:"
                    },
                    {
                        "type": "code",
                        "content": "Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml data/MH01/mav0/cam0/data data/MH01/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/MH01.txt"
                    },
                    {
                        "type": "text",
                        "content": "Výsledok: Stereo test využíva dvojicu kamier na priame výpočty hĺbky pomocou rozdielu (disparity) medzi dvoma snímkami, čím poskytuje presné informácie o vzdialenosti."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "subtitle",
                        "content": "RGB-D test"
                    },
                    {
                        "type": "text",
                        "content": "Používame dataset TUM, ktorý obsahuje RGB a hĺbkové dáta. Na zlúčenie hĺbkových a farebných dát používame skript associate.py. Tento skript páruje snímky RGB a hĺbkové dáta podľa časových značiek a vytvára súbor associations.txt, ktorý je potrebný na testovanie RGB-D."
                    },
                    {
                        "type": "text",
                        "content": "Pre náš prípad navigujte do adresára:"
                    },
                    {
                        "type": "code",
                        "content": "cd /root/yahboomcar_ros2_ws/software/orbslam2/ORB_SLAM2-master/data/TUM/rgbd_dataset_freiburg1_xyz"
                    },
                    {
                        "type": "text",
                        "content": "Spustite skript na párovanie dát:"
                    },
                    {
                        "type": "code",
                        "content": "python3 associate.py rgb.txt depth.txt > associations.txt"
                    },
                    {
                        "type": "text",
                        "content": "Po úspešnom spustení budete mať súbor associations.txt, ktorý obsahuje odkazy na zodpovedajúce snímky RGB a hĺbkové dáta."
                    },
                    {
                        "type": "text",
                        "content": "Prejdite späť do hlavného adresára a spustite RGB-D test:"
                    },
                    {
                        "type": "code",
                        "content": "cd /root/yahboomcar_ros2_ws/software/orbslam2/ORB_SLAM2-master\nExamples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUM1.yaml data/TUM/rgbd_dataset_freiburg1_xyz data/TUM/rgbd_dataset_freiburg1_xyz/associations.txt"
                    },
                    {
                        "type": "text",
                        "content": "Výsledok: RGB-D test používa farebné aj hĺbkové dáta na presnú rekonstrukciu prostredia. Tým kombinuje výhody oboch dátových typov, čím dosahuje vyššiu presnosť v mapovaní a lokalizácii."
                    }           
                ]
            }
        ]
    },
    {
        "id": "module-8",
        "name": "Modul 8: LiDAR",
        "lectures": [
            { 
                "id": "lecture-8-1", 
                "name": "Prednáška 7 - LiDAR: Detailnejší pohľad",
                "description": [
                    {
                        "type": "title",
                        "content": "Čo je LiDAR?"
                    },
                    {
                        "type": "text",
                        "content": "LiDAR (Light Detection and Ranging) je technológia umožňujúca presné meranie vzdialeností k objektom v okolí. Funguje na princípe:"
                    },
                    {
                        "type": "bullet",
                        "item": "Vysielania krátkych laserových impulzov",
                        "description": "Typicky infračerveného alebo viditeľného svetla."
                    },
                    {
                        "type": "bullet",
                        "item": "Zachytávania odrazeného svetla senzorom",
                        "description": "Senzor prijíma svetlo odrazené od objektov."
                    },
                    {
                        "type": "bullet",
                        "item": "Výpočtu času medzi vyslaním a prijatím impulzu",
                        "description": "Tento čas sa použije na určenie vzdialenosti."
                    },
                    {
                        "type": "text",
                        "content": "Vďaka rýchlym pulzom a schopnosti otáčať sa do 360°, LiDAR vytvára hustú mapu okolitých vzdialeností v reálnom čase. Výsledkom je 2D (prípadne 3D, pri pokročilejších LiDARoch) mračno bodov, ktoré dokáže zachytiť tvar prostredia s vysokou presnosťou."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "RPLIDAR A1 na ROSmaster R2"
                    },
                    {
                        "type": "text",
                        "content": "RPLIDAR A1 (známy aj ako Slamtec A1) je cenovo dostupný LiDAR s možnosťou 360° skenovania. Je ideálnou voľbou pre mobilné roboty vďaka svojej kombinácii presnosti, spoľahlivosti a nízkych nákladov."
                    },
                    {
                        "type": "subtitle",
                        "content": "Prečo práve RPLIDAR A1"
                    },
                    {
                        "type": "bullet",
                        "item": "Presnosť a spoľahlivosť merania",
                        "description": "LiDAR dokáže presne určiť vzdialenosti objektov v okolí robota."
                    },
                    {
                        "type": "bullet",
                        "item": "Kompaktné rozmery a nízka hmotnosť",
                        "description": "Vhodné pre menšie mobilné roboty, kde je priestor a váha obmedzená."
                    },
                    {
                        "type": "subtitle",
                        "content": "Ako je integrovaný v ROSmaster R2"
                    },
                    {
                        "type": "bullet",
                        "item": "Zber dát o vzdialenostiach",
                        "description": "LiDAR rotuje v 360° a poskytuje informácie o vzdialenostiach objektov v okolí robota."
                    },
                    {
                        "type": "bullet",
                        "item": "Mapovanie prostredia",
                        "description": "Pomocou SLAM algoritmov dokáže robot vytvárať mapy prostredia a lokalizovať sa v nich."
                    },
                    {
                        "type": "bullet",
                        "item": "Navigácia a vyhýbanie sa prekážkam",
                        "description": "RPLIDAR A1 umožňuje robotu rozpoznať prekážky a plánovať trasu na ich obídenie."
                    },
                    {
                        "type": "text",
                        "content": "RPLIDAR A1 komunikuje cez sériové rozhranie (UART alebo USB adaptér) a je podporovaný v ROS, čo výrazne zjednodušuje jeho integráciu do robotických systémov."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Konkrétne vlastnosti RPLIDAR A1"
                    },
                    {
                        "type": "subtitle",
                        "content": "Technológia OPTMAG"
                    },
                    {
                        "type": "text",
                        "content": "Senzor RPLIDAR A1 využíva Slamtec OPTMAG (Optical Magnetic) technológiu, ktorá nahrádza tradičné klzné kontakty pri napájaní a prenose dát. Namiesto kovových prstencov a kefiek sa používa bezdrôtový prenos energie a optická komunikácia, čo:"
                    },
                    {
                        "type": "bullet",
                        "item": "Redukcia mechanického opotrebovania",
                        "description": "Žiadne trenie kov na kov znamená dlhšiu životnosť zariadenia."
                    },
                    {
                        "type": "bullet",
                        "item": "Zvýšená životnosť senzora",
                        "description": "Technológia znižuje potrebu častých výmen súčiastok."
                    },
                    {
                        "type": "bullet",
                        "item": "Eliminácia potreby údržby",
                        "description": "Nie je nutné čistenie kontaktov ani iná pravidelná údržba."
                    },
                    {
                        "type": "subtitle",
                        "content": "Rozsah merania"
                    },
                    {
                        "type": "bullet",
                        "item": "Typický merací dosah",
                        "description": "Do cca 6 - 12 metrov v závislosti od verzie a podmienok."
                    },
                    {
                        "type": "bullet",
                        "item": "Presnosť merania",
                        "description": "Bežne okolo ±1 %, najmä v optimálnych podmienkach."
                    },
                    {
                        "type": "subtitle",
                        "content": "Rozsah skenovania 360°"
                    },
                    {
                        "type": "bullet",
                        "item": "Rýchlosť rotácie",
                        "description": "5 - 10 Hz, čo zodpovedá 300 - 600 otáčkam za minútu."
                    },
                    {
                        "type": "bullet",
                        "item": "Kompletné 2D údaje",
                        "description": "Jedno otočenie senzora poskytuje úplný obraz okolia."
                    },
                    {
                        "type": "subtitle",
                        "content": "Komunikačné rozhranie a kompatibilita s ROS"
                    },
                    {
                        "type": "bullet",
                        "item": "Jednoduché pripojenie",
                        "description": "Pripojenie cez USB alebo UART, s podporou adaptéra."
                    },
                    {
                        "type": "bullet",
                        "item": "Oficiálny balík ROS",
                        "description": "Umožňuje jednoduchú integráciu a spracovanie dát v reálnom čase."
                    },
                    {
                        "type": "subtitle",
                        "content": "Napájanie a spotreba"
                    },
                    {
                        "type": "bullet",
                        "item": "Nízke napätie",
                        "description": "Typicky 5 V, v závislosti od série."
                    },
                    {
                        "type": "bullet",
                        "item": "Malá spotreba energie",
                        "description": "Maximálne niekoľko wattov, vhodné pre batériové systémy."
                    },
                    {
                        "type": "line"
                    },
                    {
                        "type": "title",
                        "content": "Zhrnutie a dôvod nasadenia"
                    },
                    {
                        "type": "bullet",
                        "item": "Cenová dostupnosť",
                        "description": "RPLIDAR A1 ponúka priaznivú cenu v porovnaní s inými LiDARmi, čo ho robí ideálnou voľbou pre výskum, prototypy, vzdelávanie i hobby projekty."
                    },
                    {
                        "type": "bullet",
                        "item": "Kompaktné rozmery a nízka hmotnosť",
                        "description": "Uľahčuje inštaláciu na menšie mobilné platformy, kde je dôležitý priestor a hmotnosť."
                    },
                    {
                        "type": "bullet",
                        "item": "360° pohľad",
                        "description": "Poskytuje kompletný prehľad o okolí, čo zlepšuje možnosti navigácie a vyhýbania sa prekážkam."
                    },
                    {
                        "type": "bullet",
                        "item": "Jednoduchá integrácia v prostredí ROS",
                        "description": "K dispozícii sú hotové knižnice a ovládače, čo skracuje čas potrebný na implementáciu."
                    },
                    {
                        "type": "bullet",
                        "item": "Spoľahlivosť a životnosť vďaka OPTMAG technológii",
                        "description": "Minimálne nároky na servis a udržiavanie vysokého výkonu po dlhší čas."
                    },
                    {
                        "type": "text",
                        "content": "Celkovo je RPLIDAR A1 považovaný za základný LiDAR senzor v robotike, ktorý poskytuje dostatočnú funkcionalitu pre väčšinu navigačných úloh za rozumnú cenu a s dlhou životnosťou."
                    }    
                ] 
            }
        ]
    },
    {
        "id": "module-9",
        "name": "Ukážkové projekty"
    }
]